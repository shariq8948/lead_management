import 'package:buttons_tabbar/buttons_tabbar.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:leads/Tasks/taskDeatails/task_details_controller.dart';
import 'package:leads/data/api/api_client.dart';
import 'package:leads/taskDeatails/task_details_controller.dart';
import 'package:leads/widgets/custom_button.dart';
import 'package:leads/widgets/custom_field.dart';
import 'package:leads/widgets/custom_select.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../google_service/google_calendar_helper.dart';
import '../../widgets/custom_date_picker.dart';
import '../../widgets/custom_loader.dart';

class TaskDetailPage extends StatelessWidget {
  final TaskDetailController controller = Get.put(TaskDetailController());

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2, // Number of tabs
      child: Scaffold(
        appBar: AppBar(
          title: Text("Task Detail"),
        ),
        body: SafeArea(
          child: Column(
            children: [
              _buildTaskDetails(context), // Header Section
              _buildTabBar(), // Custom ButtonsTabBar
              Expanded(
                child: TabBarView(
                  children: [
                    _buildActivitySection(), // Activity Section
                    // Conditional rendering based on `entrytype`
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Builder(
                        builder: (context) {
                          final entryType = controller.taskDetails[0].entrytype;
                          if (entryType == "Meeting") {
                            return buildMeetingDetails(context);
                          } else if (entryType == "FollowUp") {
                            return buildFollowUpDetails(context);
                          } else if (entryType == "CallActivity") {
                            return buildCallDetails(context);
                          } else {
                            return Center(
                              child: Text(
                                  "No details available for this entry type."),
                            );
                          }
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTabBar() {
    return ButtonsTabBar(
      height: Get.size.height * .06,
      width: Get.size.width * .5,
      backgroundColor: Colors.teal,
      unselectedBackgroundColor: Colors.grey[200],
      borderWidth: 1,
      borderColor: Colors.transparent,
      unselectedLabelStyle: TextStyle(
        color: Colors.black,
        fontWeight: FontWeight.bold,
      ),
      labelStyle: TextStyle(
        color: Colors.white,
        fontWeight: FontWeight.bold,
      ),
      // radius: 25,
      contentPadding: EdgeInsets.symmetric(horizontal: Get.size.width * .18),
      tabs: [
        Tab(text: "Activity"),
        Tab(text: "Details"),
      ],
    );
  }

  Widget _buildActivitySection() {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: TextField(
            controller: controller.commentController,
            decoration: InputDecoration(
              contentPadding:
                  const EdgeInsets.symmetric(vertical: 14.0, horizontal: 16.0),
              hintText: "Add a comment...",
              hintStyle: TextStyle(
                color: Colors.grey[500],
                fontStyle: FontStyle.italic,
              ),
              filled: true,
              fillColor: Colors.grey[100],
              suffixIcon: Container(
                margin: const EdgeInsets.only(right: 4.0),
                decoration: BoxDecoration(
                  color: Colors.green,
                  borderRadius: BorderRadius.circular(8.0),
                ),
                child: IconButton(
                  icon: Icon(Icons.send, color: Colors.white),
                  onPressed: () {
                    if (controller.commentController.text.isNotEmpty) {
                      controller.postComment(controller.taskDetails[0].id!);
                      controller.commentController.clear();
                    }
                  },
                ),
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide.none,
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: Colors.grey[300]!),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: Colors.green),
              ),
            ),
            style: TextStyle(fontSize: 16.0),
          ),
        ),
        Obx(
          () => Expanded(
            child: controller.isLoadingActivities.value
                ? Center(
                    child: CustomLoader(),
                  )
                : controller.taskActivities.isEmpty
                    ? Center(
                        child: Text(
                          "No activities yet",
                          style: TextStyle(
                            fontSize: 16.0,
                            color: Colors.grey,
                          ),
                        ),
                      )
                    : ListView.builder(
                        padding: const EdgeInsets.symmetric(horizontal: 16.0),
                        itemCount: controller.taskActivities.length,
                        itemBuilder: (context, index) {
                          final activity = controller.taskActivities[index];
                          return _buildActivityTile(
                            date: activity.formateddate!,
                            time: activity.hon!,
                            title: activity.typename ?? "No Title",
                            details: activity.typemsg!,
                            user: activity.actihisycreatedbyname!,
                          );
                        },
                      ),
          ),
        ),
      ],
    );
  }

  Widget _buildActivityTile({
    required String date,
    required String time,
    required String title,
    required String details,
    required String user,
  }) {
    IconData getIconForTitle(String title) {
      switch (title.toLowerCase()) {
        case "callactivity":
          return Icons.phone_outlined; // Example icon for "Call Activity"
        case "comment":
          return Icons.chat_bubble_outline; // Example icon for "Comment"
        case "updatestatus":
          return Icons.edit_outlined; // Example icon for "Lead Updated"
        case "followup":
          return Icons.recycling_outlined; // Example icon for "Follow Up"
        case "lead assign":
          return Icons
              .assignment_ind_outlined; // Example icon for "Lead Assign"
        case "lead status":
          return Icons.factory_outlined; // Example icon for "Lead Status"
        default:
          return Icons.info_outline; // Default icon for other titles
      }
    }

    Color getColorForTitle(String title) {
      switch (title.toLowerCase()) {
        case "callactivity":
          return Colors.blue; // Color for "Call Activity"
        case "comment":
          return Colors.green; // Color for "Comment"
        case "taskassign":
          return Colors.orange; // Color for "Comment"
        case "updatestatus":
          return Colors.orange; // Color for "Lead Updated"
        case "followup":
          return Colors.purple; // Color for "Follow Up"
        case "lead assign":
          return Colors.teal;
        case "taskcreated":
          return Colors.purpleAccent; // Color for "Lead Assign"
        case "lead status":
          return Colors.red; // Color for "Lead Status"
        default:
          return Colors.grey; // Default color for other titles
      }
    }

    final iconColor = getColorForTitle(title);

    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Column(
          children: [
            Text(
              date,
              style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.bold),
            ),
            Icon(getIconForTitle(title), color: iconColor),
            Container(
              height: 50.0,
              width: 3.0,
              color: iconColor, // Line color based on the title
            ),
          ],
        ),
        const SizedBox(width: 10),
        Expanded(
          child: Container(
            margin: const EdgeInsets.only(bottom: 16.0),
            padding: const EdgeInsets.all(16.0),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8.0),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 4.0,
                  offset: Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold,
                    color: iconColor, // Title color to match the icon
                  ),
                ),
                const SizedBox(height: 4.0),
                Text(
                  details,
                  style: TextStyle(color: Colors.grey[700]),
                ),
                const SizedBox(height: 8.0),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      time,
                      style: TextStyle(color: Colors.grey[600], fontSize: 12.0),
                    ),
                    Text(
                      "By $user",
                      style: TextStyle(color: Colors.grey[600], fontSize: 12.0),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTaskDetails(BuildContext context) {
    return Container(
      margin: EdgeInsets.all(10),
      padding: const EdgeInsets.all(10),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          bottomLeft: Radius.circular(20),
          bottomRight: Radius.circular(20),
          topLeft: Radius.circular(8),
          topRight: Radius.circular(8),
        ),
        boxShadow: [BoxShadow(color: Colors.grey.shade300, blurRadius: 5)],
      ),
      child: Obx(
        () => controller.isLoadingDetails.value
            ? Center(child: CustomLoader())
            : Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Entry Type
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        controller.taskDetails[0].entrytype ?? "",
                        style: TextStyle(
                          color: Colors.pink,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 4),

                  // Assignment and Creator Info
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "Assign to: ${controller.taskDetails[0].assigntoName ?? ""}",
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        "Created by: ${controller.taskDetails[0].createdByName ?? ""}",
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),

                  // Customer Name and Mobile
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        controller.taskDetails[0].cname ?? "",
                        style: TextStyle(
                            fontSize: 18, color: Colors.pink.shade500),
                      ),
                      Text(
                        controller.taskDetails[0].mobile ?? "",
                        style: TextStyle(
                            fontSize: 18, color: Colors.black.withOpacity(.6)),
                      ),
                    ],
                  ),
                  const SizedBox(height: 4),

                  // Communication Buttons
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      IconButton(
                        icon: Image(
                            image: AssetImage('assets/icons/call (2).png')),
                        onPressed: () =>
                            _launchPhone(controller.taskDetails[0].mobile!),
                        color: Colors.blue,
                      ),
                      IconButton(
                        icon: Image(
                            image: AssetImage('assets/icons/whatsapp.png')),
                        onPressed: () =>
                            _launchWhatsApp(controller.taskDetails[0].mobile!),
                        color: Colors.green,
                      ),
                      IconButton(
                        icon: Image(
                            image: AssetImage('assets/icons/message.png')),
                        onPressed: () =>
                            _launchSMS(controller.taskDetails[0].mobile!),
                        color: Colors.blue,
                      ),
                      IconButton(
                        icon: Image(image: AssetImage('assets/icons/mail.png')),
                        onPressed: () =>
                            _launchMail(controller.taskDetails[0].email ?? ""),
                        color: Colors.red,
                      ),
                      IconButton(
                        icon:
                            Image(image: AssetImage('assets/icons/share.png')),
                        onPressed: () => _shareContent(),
                      ),
                    ],
                  ),

                  // Status Buttons with Arrows
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildStatusButton("Pending", context),
                      Icon(Icons.arrow_forward_ios,
                          size: 16, color: Colors.grey.shade600),
                      _buildStatusButton("Completed", context),
                      Icon(Icons.arrow_forward_ios,
                          size: 16, color: Colors.grey.shade600),
                      _buildStatusButton("Cancelled", context),
                    ],
                  ),
                ],
              ),
      ),
    );
  }

  Widget _buildStatusButton(String status, BuildContext context) {
    final isSelected = controller.taskDetails[0].status == status;

    return GestureDetector(
      onTap: () {
        if (!isSelected) {
          // Show follow-up popup for Cancelled or Complete status
          if (status == "Cancelled" || status == "Completed") {
            _showFollowUpPopup(context, status);
          } else {
            controller.postStatus(controller.taskDetails[0].id!, status);
          }
        }
      },
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        decoration: BoxDecoration(
          color: isSelected
              ? _getStatusColor(status)
              : Colors.grey.shade200, // Unselected background
          borderRadius: BorderRadius.circular(12),
          boxShadow: isSelected
              ? [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 4,
                    offset: Offset(0, 2),
                  ),
                ]
              : [],
        ),
        child: Text(
          status,
          style: TextStyle(
            color: isSelected
                ? _getTextColor(status)
                : Colors.grey.shade600, // Unselected text color
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  Color _getStatusColor(String status) {
    switch (status) {
      case "Completed":
        return Colors.green;
      case "Cancelled":
        return Colors.red;
      case "Pending":
        return Colors.orange;
      case "In Progress":
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  IconData _getStatusIcon(String status) {
    switch (status) {
      case "Completed":
        return Icons.check_circle;
      case "Cancelled":
        return Icons.cancel;
      case "Pending":
        return Icons.hourglass_empty;
      case "In Progress":
        return Icons.sync;
      default:
        return Icons.circle;
    }
  }

  String _getPriorityText(int priority) {
    switch (priority) {
      case 1:
        return "Very Low";
      case 2:
        return "Low";
      case 3:
        return "Medium";
      case 4:
        return "High";
      case 5:
        return "Critical";
      default:
        return "Medium";
    }
  }

  Color _getPriorityColor(int priority) {
    switch (priority) {
      case 1:
        return Colors.blue.shade300;
      case 2:
        return Colors.blue.shade600;
      case 3:
        return Colors.amber;
      case 4:
        return Colors.orange;
      case 5:
        return Colors.red;
      default:
        return Colors.amber;
    }
  }

  Color _getConversionColor(int probability) {
    if (probability >= 75) {
      return Colors.green;
    } else if (probability >= 50) {
      return Colors.amber.shade700;
    } else if (probability >= 25) {
      return Colors.orange;
    } else {
      return Colors.red;
    }
  }

  String _getAIInsight(String status, String leadType) {
    Map<String, String> insights = {
      "Completed":
          "Based on similar $leadType clients, there's a 76% chance of upselling within 30 days. Consider scheduling a product demo.",
      "Cancelled":
          "Analysis of similar cancellations shows 42% can be recovered with a personalized offer. Best time to reach out is within 7 days.",
      "Pending":
          "Leads like this typically need 3 follow-ups before conversion. Recommended to focus on value proposition.",
      "In Progress":
          "Companies in this segment typically take 14 days to make decisions. Providing a case study might accelerate the process."
    };

    return insights[status] ??
        "AI recommends following up in 7 days with personalized content based on lead behavior patterns.";
  }

//   void _showFollowUpPopup(BuildContext context, String status) {
//     final TextEditingController remarkController = TextEditingController();
//     final TextEditingController followUpDateController =
//         TextEditingController();
//     final controller = Get.find<TaskDetailController>();
//
//     // AI-suggested follow-up types based on status
//     List<String> suggestedFollowUpTypes = status == "Completed"
//         ? [
//             "Customer Feedback",
//             "Product Demo",
//             "Contract Renewal",
//             "Upsell Opportunity"
//           ]
//         : [
//             "Re-engagement",
//             "Alternative Proposal",
//             "Competitor Analysis",
//             "Budget Discussion"
//           ];
//
//     // Current date for follow-up suggestion
//     DateTime now = DateTime.now();
//     DateTime suggestedDate =
//         now.add(Duration(days: status == "Completed" ? 14 : 7));
//
//     // AI-suggested remark based on status
//     String suggestedRemark = status == "Completed"
//         ? "Task completed successfully. Follow up in two weeks to gather feedback and explore additional opportunities."
//         : "Task cancelled. Follow up in one week to understand concerns and present alternative solutions.";
//
//     // Pre-fill the suggestions
//     remarkController.text = suggestedRemark;
//     followUpDateController.text =
//         "${suggestedDate.day}/${suggestedDate.month}/${suggestedDate.year}";
//
//     RxString selectedFollowUpType = suggestedFollowUpTypes[0].obs;
//
//     showDialog(
//       context: context,
//       builder: (BuildContext context) {
//         return Dialog(
//           shape: RoundedRectangleBorder(
//             borderRadius: BorderRadius.circular(16),
//           ),
//           elevation: 0,
//           backgroundColor: Colors.transparent,
//           child: Container(
//             width: MediaQuery.of(context).size.width * 0.9,
//             padding: EdgeInsets.all(20),
//             decoration: BoxDecoration(
//               color: Colors.white,
//               borderRadius: BorderRadius.circular(16),
//               boxShadow: [
//                 BoxShadow(
//                   color: Colors.black.withOpacity(0.1),
//                   blurRadius: 10,
//                   offset: Offset(0, 5),
//                 ),
//               ],
//             ),
//             child: Column(
//               mainAxisSize: MainAxisSize.min,
//               children: [
//                 Row(
//                   children: [
//                     Container(
//                       padding: EdgeInsets.all(10),
//                       decoration: BoxDecoration(
//                         color: status == "Completed"
//                             ? Colors.green.shade100
//                             : Colors.red.shade100,
//                         borderRadius: BorderRadius.circular(12),
//                       ),
//                       child: Icon(
//                         status == "Completed"
//                             ? Icons.check_circle
//                             : Icons.cancel,
//                         color:
//                             status == "Completed" ? Colors.green : Colors.red,
//                       ),
//                     ),
//                     SizedBox(width: 12),
//                     Column(
//                       crossAxisAlignment: CrossAxisAlignment.start,
//                       children: [
//                         Text(
//                           "AI-Assisted Follow-up",
//                           style: TextStyle(
//                             fontSize: 18,
//                             fontWeight: FontWeight.bold,
//                           ),
//                         ),
//                         Text(
//                           "Task marked as $status",
//                           style: TextStyle(
//                             color: Colors.grey.shade600,
//                           ),
//                         ),
//                       ],
//                     ),
//                   ],
//                 ),
//                 SizedBox(height: 20),
//                 Container(
//                   padding: EdgeInsets.all(12),
//                   decoration: BoxDecoration(
//                     color: Colors.blue.shade50,
//                     borderRadius: BorderRadius.circular(8),
//                     border: Border.all(color: Colors.blue.shade200),
//                   ),
//                   child: Row(
//                     children: [
//                       Icon(Icons.lightbulb_outline, color: Colors.blue),
//                       SizedBox(width: 8),
//                       Expanded(
//                         child: Text(
//                           "AI suggests: ${status == 'Completed' ? 'Send a follow-up in 2 weeks' : 'Re-engage in 1 week with alternatives'}",
//                           style: TextStyle(
//                             color: Colors.blue.shade800,
//                             fontStyle: FontStyle.italic,
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//                 SizedBox(height: 20),
//                 Obx(() => Container(
//                       padding:
//                           EdgeInsets.symmetric(horizontal: 12, vertical: 6),
//                       decoration: BoxDecoration(
//                         color: Colors.grey.shade100,
//                         borderRadius: BorderRadius.circular(8),
//                         border: Border.all(color: Colors.grey.shade300),
//                       ),
//                       child: DropdownButton<String>(
//                         value: selectedFollowUpType.value,
//                         isExpanded: true,
//                         underline: SizedBox(),
//                         hint: Text("Select Follow-up Type"),
//                         onChanged: (String? newValue) {
//                           if (newValue != null) {
//                             selectedFollowUpType.value = newValue;
//                           }
//                         },
//                         items: suggestedFollowUpTypes
//                             .map<DropdownMenuItem<String>>((String value) {
//                           return DropdownMenuItem<String>(
//                             value: value,
//                             child: Text(value),
//                           );
//                         }).toList(),
//                       ),
//                     )),
//                 SizedBox(height: 16),
//                 TextField(
//                   controller: followUpDateController,
//                   decoration: InputDecoration(
//                     labelText: "Follow-up Date",
//                     prefixIcon: Icon(Icons.calendar_today),
//                     border: OutlineInputBorder(
//                       borderRadius: BorderRadius.circular(8),
//                     ),
//                   ),
//                   readOnly: true,
//                   onTap: () async {
//                     DateTime? pickedDate = await showDatePicker(
//                       context: context,
//                       initialDate: suggestedDate,
//                       firstDate: DateTime.now(),
//                       lastDate: DateTime.now().add(Duration(days: 365)),
//                     );
//                     if (pickedDate != null) {
//                       followUpDateController.text =
//                           "${pickedDate.day}/${pickedDate.month}/${pickedDate.year}";
//                     }
//                   },
//                 ),
//                 SizedBox(height: 16),
//                 TextField(
//                   controller: remarkController,
//                   decoration: InputDecoration(
//                     labelText: "Follow-up Notes",
//                     prefixIcon: Icon(Icons.note),
//                     border: OutlineInputBorder(
//                       borderRadius: BorderRadius.circular(8),
//                     ),
//                   ),
//                   maxLines: 3,
//                 ),
//                 SizedBox(height: 24),
//                 Row(
//                   mainAxisAlignment: MainAxisAlignment.end,
//                   children: [
//                     TextButton(
//                       onPressed: () {
//                         controller.postStatus(
//                             controller.taskDetails[0].id!, status);
//
//                         // Save the follow-up information
//                         // This would typically call a method to add a follow-up task
//                         // For demonstration, we'll show a success message
//                         Navigator.of(context).pop();
//                         Navigator.of(context).pop();
//                       },
//                       child: Text("Only Mark as ${status}"),
//                     ),
//                     SizedBox(width: 12),
//                     ElevatedButton(
//                       onPressed: () {
//                         // First update the task status
//                         controller.postStatus(
//                             controller.taskDetails[0].id!, status);
//
//                         // Save the follow-up information
//                         // This would typically call a method to add a follow-up task
//                         // For demonstration, we'll show a success message
//                         Navigator.of(context).pop();
//
//                         // Show a confirmation popup
//                         _showAIConfirmation(
//                             context,
//                             status,
//                             selectedFollowUpType.value,
//                             followUpDateController.text,
//                             remarkController.text);
//                       },
//                       style: ElevatedButton.styleFrom(
//                         backgroundColor: Colors.green,
//                         padding:
//                             EdgeInsets.symmetric(horizontal: 20, vertical: 12),
//                         shape: RoundedRectangleBorder(
//                           borderRadius: BorderRadius.circular(8),
//                         ),
//                       ),
//                       child: Row(
//                         mainAxisSize: MainAxisSize.min,
//                         children: [
//                           Icon(Icons.check),
//                           SizedBox(width: 8),
//                           Text("Save & Schedule"),
//                         ],
//                       ),
//                     ),
//                   ],
//                 ),
//               ],
//             ),
//           ),
//         );
//       },
//     );
//   }
//
//   void _showAIConfirmation(BuildContext context, String status,
//       String followUpType, String followUpDate, String remark)
//   {
//     showDialog(
//       context: context,
//       builder: (BuildContext context) {
//         return Dialog(
//           shape: RoundedRectangleBorder(
//             borderRadius: BorderRadius.circular(16),
//           ),
//           elevation: 0,
//           backgroundColor: Colors.transparent,
//           child: Container(
//             padding: EdgeInsets.all(20),
//             decoration: BoxDecoration(
//               color: Colors.white,
//               borderRadius: BorderRadius.circular(16),
//             ),
//             child: Column(
//               mainAxisSize: MainAxisSize.min,
//               children: [
//                 Container(
//                   padding: EdgeInsets.all(16),
//                   decoration: BoxDecoration(
//                     color: Colors.blue.shade50,
//                     shape: BoxShape.circle,
//                   ),
//                   child: Icon(
//                     Icons.done_all,
//                     color: Colors.blue,
//                     size: 40,
//                   ),
//                 ),
//                 SizedBox(height: 20),
//                 Text(
//                   "Task Updated Successfully",
//                   style: TextStyle(
//                     fontSize: 18,
//                     fontWeight: FontWeight.bold,
//                   ),
//                 ),
//                 SizedBox(height: 12),
//                 Text(
//                   "AI Assistant has scheduled a follow-up task of type '$followUpType' for $followUpDate.",
//                   textAlign: TextAlign.center,
//                   style: TextStyle(
//                     color: Colors.grey.shade700,
//                   ),
//                 ),
//                 SizedBox(height: 24),
//                 ElevatedButton(
//                   onPressed: () {
//                     Navigator.of(context).pop();
//                     Navigator.of(context).pop();
//                   },
//                   style: ElevatedButton.styleFrom(
//                     backgroundColor: Colors.blue,
//                     padding: EdgeInsets.symmetric(horizontal: 40, vertical: 12),
//                     shape: RoundedRectangleBorder(
//                       borderRadius: BorderRadius.circular(8),
//                     ),
//                   ),
//                   child: Text("Great!"),
//                 ),
//               ],
//             ),
//           ),
//         );
//       },
//     );
//   }
//
// // Helper function for status color
//   Color _getStatusColor(String status) {
//     switch (status) {
//       case "Complete":
//         return Colors.green;
//       case "Pending":
//         return Colors.amber;
//       case "In Progress":
//         return Colors.blue;
//       case "Cancelled":
//         return Colors.red;
//       default:
//         return Colors.grey;
//     }
//   }
//
// // Helper function for text color
  Color _getTextColor(String status) {
    switch (status) {
      case "Complete":
      case "Cancelled":
      case "In Progress":
        return Colors.white;
      default:
        return Colors.black87;
    }
  }

  void _showFollowUpPopup(BuildContext context, String status) {
    final TextEditingController remarkController = TextEditingController();
    final TextEditingController followUpDateController =
        TextEditingController();
    final controller = Get.find<TaskDetailController>();
    final aiAnalyticsController = Get.put(AILeadAnalyticsController());

    // AI-suggested follow-up types based on status and lead history analysis
    Map<String, List<String>> followUpTypesByStatus = {
      "Completed": [
        "Customer Feedback",
        "Product Demo",
        "Contract Renewal",
        "Upsell Opportunity",
        "Cross-sell Recommendation",
        "Satisfaction Survey",
        "Referral Request"
      ],
      "Cancelled": [
        "Re-engagement",
        "Alternative Proposal",
        "Competitor Analysis",
        "Budget Discussion",
        "Pain Point Analysis",
        "Special Offer",
        "Win-back Campaign"
      ],
      "Pending": [
        "Status Update",
        "Value Proposition",
        "Decision Maker Meeting",
        "Pricing Discussion",
        "Technical Demo"
      ],
      "In Progress": [
        "Progress Update",
        "Additional Information",
        "Stakeholder Meeting",
        "Resource Allocation",
        "Timeline Review"
      ]
    };

    List<String> suggestedFollowUpTypes =
        followUpTypesByStatus[status] ?? followUpTypesByStatus["Completed"]!;

    // Get AI-recommended optimal follow-up window based on lead engagement metrics
    DateTime now = DateTime.now();
    Map<String, int> optimalFollowUpDays = {
      "Completed": aiAnalyticsController.getOptimalFollowUpDays(
          status: "Completed", leadType: "hh"),
      "Cancelled": aiAnalyticsController.getOptimalFollowUpDays(
          status: "Cancelled", leadType: "hhsfrsf"),
      "Pending": 3,
      "In Progress": 2
    };

    int followUpDays = optimalFollowUpDays[status] ?? 7;
    DateTime suggestedDate = now.add(Duration(days: followUpDays));

    // AI-suggested personalized remark based on lead history, status, and engagement patterns
    String suggestedRemark = aiAnalyticsController.generateSmartFollowUpNote(
        status: status,
        leadName: "controller.taskDetails[0].leadname!",
        leadType: " controller.taskDetails[0].leadsource!",
        previousInteractions: ["10"],
        engagementScore: 00);

    // Pre-fill the suggestions
    remarkController.text = suggestedRemark;
    followUpDateController.text =
        "${suggestedDate.day}/${suggestedDate.month}/${suggestedDate.year}";

    // Generate AI-recommended priority level for this follow-up
    RxInt aiRecommendedPriority = aiAnalyticsController
        .calculateLeadPriority(
            status: status,
            leadValue: 20000,
            conversionProbability: 10,
            industry: " controller.taskDetails[0].industrytype!")
        .obs;

    RxString selectedFollowUpType = suggestedFollowUpTypes[0].obs;
    RxBool isAiMode = true.obs;
    RxBool isProcessing = false.obs;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          elevation: 0,
          backgroundColor: Colors.transparent,
          child: ConstrainedBox(
            constraints: BoxConstraints(
              maxHeight: MediaQuery.of(context).size.height *
                  0.8, // Maximum height constraint
              maxWidth: MediaQuery.of(context).size.width * 0.9,
            ),
            child: Container(
              width: MediaQuery.of(context).size.width * 0.9,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 10,
                    offset: Offset(0, 5),
                  ),
                ],
              ),
              child: Obx(() => Stack(
                    children: [
                      // Main Content in a SingleChildScrollView
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: SingleChildScrollView(
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              // Header with AI logo
                              Row(
                                children: [
                                  Container(
                                    padding: EdgeInsets.all(8),
                                    decoration: BoxDecoration(
                                      color: _getStatusColor(status)
                                          .withOpacity(0.2),
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    child: Icon(
                                      _getStatusIcon(status),
                                      color: _getStatusColor(status),
                                      size: 20,
                                    ),
                                  ),
                                  SizedBox(width: 10),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          children: [
                                            Text(
                                              "Smart Follow-up",
                                              style: TextStyle(
                                                fontSize: 16,
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                            SizedBox(width: 6),
                                            Container(
                                              padding: EdgeInsets.symmetric(
                                                  horizontal: 6, vertical: 2),
                                              decoration: BoxDecoration(
                                                color: Colors.blue.shade50,
                                                borderRadius:
                                                    BorderRadius.circular(12),
                                                border: Border.all(
                                                    color:
                                                        Colors.blue.shade200),
                                              ),
                                              child: Row(
                                                mainAxisSize: MainAxisSize.min,
                                                children: [
                                                  Icon(Icons.auto_awesome,
                                                      size: 12,
                                                      color: Colors.blue),
                                                  SizedBox(width: 2),
                                                  Text(
                                                    "AI",
                                                    style: TextStyle(
                                                      fontSize: 10,
                                                      fontWeight:
                                                          FontWeight.bold,
                                                      color: Colors.blue,
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                        Text(
                                          "Task marked as $status",
                                          style: TextStyle(
                                            fontSize: 12,
                                            color: Colors.grey.shade600,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  // AI Mode Toggle
                                  Switch(
                                    value: isAiMode.value,
                                    onChanged: (value) {
                                      isAiMode.value = value;
                                      if (value) {
                                        // Reset to AI suggestions when turning AI back on
                                        remarkController.text = suggestedRemark;
                                        followUpDateController.text =
                                            "${suggestedDate.day}/${suggestedDate.month}/${suggestedDate.year}";
                                        selectedFollowUpType.value =
                                            suggestedFollowUpTypes[0];
                                      }
                                    },
                                    activeColor: Colors.blue,
                                  )
                                ],
                              ),
                              SizedBox(height: 16),

                              // AI Insight Card
                              if (isAiMode.value)
                                Container(
                                  padding: EdgeInsets.all(10),
                                  decoration: BoxDecoration(
                                    color: Colors.blue.shade50,
                                    borderRadius: BorderRadius.circular(8),
                                    border:
                                        Border.all(color: Colors.blue.shade200),
                                  ),
                                  child: Column(
                                    children: [
                                      Row(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Icon(Icons.lightbulb_outline,
                                              color: Colors.blue, size: 18),
                                          SizedBox(width: 8),
                                          Expanded(
                                            child: Column(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.start,
                                              children: [
                                                Text(
                                                  "AI Lead Insight",
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.bold,
                                                    color: Colors.blue.shade800,
                                                    fontSize: 14,
                                                  ),
                                                ),
                                                Text(
                                                  _getAIInsight(status,
                                                      'controller.taskDetails[0].leadstatus!'),
                                                  style: TextStyle(
                                                    color: Colors.blue.shade800,
                                                    fontSize: 12,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                      SizedBox(height: 8),

                                      // Show lead conversion probability
                                      Container(
                                        padding: EdgeInsets.symmetric(
                                            vertical: 4, horizontal: 8),
                                        decoration: BoxDecoration(
                                          color: Colors.white,
                                          borderRadius:
                                              BorderRadius.circular(6),
                                        ),
                                        child: Row(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            Text(
                                              "Conversion Probability: ",
                                              style: TextStyle(
                                                fontSize: 11,
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                            Text(
                                              "10%",
                                              style: TextStyle(
                                                fontSize: 11,
                                                fontWeight: FontWeight.bold,
                                                color: _getConversionColor(10),
                                              ),
                                            ),
                                            SizedBox(width: 4),
                                            Icon(
                                              controller.taskDetails[0]
                                                          .status ==
                                                      "up"
                                                  ? Icons.trending_up
                                                  : Icons.trending_down,
                                              size: 14,
                                              color: controller.taskDetails[0]
                                                          .status ==
                                                      "up"
                                                  ? Colors.green
                                                  : Colors.red,
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              SizedBox(height: 16),

                              // Follow-up Type Dropdown with AI recommendation indicator
                              Container(
                                padding: EdgeInsets.symmetric(
                                    horizontal: 10, vertical: 4),
                                decoration: BoxDecoration(
                                  color: Colors.grey.shade100,
                                  borderRadius: BorderRadius.circular(8),
                                  border:
                                      Border.all(color: Colors.grey.shade300),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    if (isAiMode.value)
                                      Padding(
                                        padding:
                                            const EdgeInsets.only(bottom: 2.0),
                                        child: Row(
                                          children: [
                                            Icon(Icons.auto_awesome,
                                                size: 12, color: Colors.blue),
                                            SizedBox(width: 4),
                                            Text(
                                              "AI Recommendation",
                                              style: TextStyle(
                                                fontSize: 11,
                                                color: Colors.blue,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    DropdownButton<String>(
                                      value: selectedFollowUpType.value,
                                      isExpanded: true,
                                      underline: SizedBox(),
                                      isDense:
                                          true, // Makes the dropdown more compact
                                      hint: Text("Select Follow-up Type",
                                          style: TextStyle(fontSize: 13)),
                                      onChanged: (String? newValue) {
                                        if (newValue != null) {
                                          selectedFollowUpType.value = newValue;
                                        }
                                      },
                                      items: suggestedFollowUpTypes
                                          .map<DropdownMenuItem<String>>(
                                              (String value) {
                                        return DropdownMenuItem<String>(
                                          value: value,
                                          child: Row(
                                            children: [
                                              Text(value,
                                                  style:
                                                      TextStyle(fontSize: 13)),
                                              if (isAiMode.value &&
                                                  suggestedFollowUpTypes
                                                          .indexOf(value) <
                                                      3)
                                                Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          left: 6.0),
                                                  child: Container(
                                                    padding:
                                                        EdgeInsets.symmetric(
                                                            horizontal: 4,
                                                            vertical: 1),
                                                    decoration: BoxDecoration(
                                                      color:
                                                          Colors.green.shade50,
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              4),
                                                      border: Border.all(
                                                          color: Colors
                                                              .green.shade200,
                                                          width: 1),
                                                    ),
                                                    child: Text(
                                                      "Recommended",
                                                      style: TextStyle(
                                                        fontSize: 9,
                                                        color: Colors
                                                            .green.shade700,
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                            ],
                                          ),
                                        );
                                      }).toList(),
                                    ),
                                  ],
                                ),
                              ),
                              SizedBox(height: 12),

                              // AI-recommended priority level - made more compact
                              if (isAiMode.value)
                                Container(
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 10, vertical: 6),
                                  decoration: BoxDecoration(
                                    color: Colors.grey.shade100,
                                    borderRadius: BorderRadius.circular(8),
                                    border:
                                        Border.all(color: Colors.grey.shade300),
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        children: [
                                          Icon(Icons.auto_awesome,
                                              size: 12, color: Colors.blue),
                                          SizedBox(width: 4),
                                          Text(
                                            "AI Priority Recommendation",
                                            style: TextStyle(
                                              fontSize: 11,
                                              color: Colors.blue,
                                            ),
                                          ),
                                        ],
                                      ),
                                      SizedBox(height: 4),
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: List.generate(
                                          5,
                                          (index) => GestureDetector(
                                            onTap: () {
                                              aiRecommendedPriority.value =
                                                  index + 1;
                                            },
                                            child: Container(
                                              width: 32, // Smaller width
                                              height: 32, // Smaller height
                                              decoration: BoxDecoration(
                                                color: index + 1 <=
                                                        aiRecommendedPriority
                                                            .value
                                                    ? _getPriorityColor(
                                                        index + 1)
                                                    : Colors.grey.shade200,
                                                borderRadius:
                                                    BorderRadius.circular(6),
                                                border: Border.all(
                                                  color: index + 1 <=
                                                          aiRecommendedPriority
                                                              .value
                                                      ? _getPriorityColor(
                                                              index + 1)
                                                          .withOpacity(0.8)
                                                      : Colors.grey.shade300,
                                                  width: 1.5, // Thinner border
                                                ),
                                              ),
                                              child: Center(
                                                child: Text(
                                                  (index + 1).toString(),
                                                  style: TextStyle(
                                                    fontSize:
                                                        13, // Smaller font
                                                    color: index + 1 <=
                                                            aiRecommendedPriority
                                                                .value
                                                        ? Colors.white
                                                        : Colors.grey.shade700,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ),
                                        ),
                                      ),
                                      SizedBox(height: 2),
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(
                                            "Low",
                                            style: TextStyle(
                                              fontSize: 10,
                                              color: Colors.grey.shade600,
                                            ),
                                          ),
                                          Text(
                                            "High",
                                            style: TextStyle(
                                              fontSize: 10,
                                              color: Colors.grey.shade600,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),

                              SizedBox(height: 12),

                              // Follow-up date with AI recommendation indicator
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  if (isAiMode.value)
                                    Padding(
                                      padding: const EdgeInsets.only(
                                          bottom: 2.0, left: 2),
                                      child: Row(
                                        children: [
                                          Icon(Icons.auto_awesome,
                                              size: 12, color: Colors.blue),
                                          SizedBox(width: 4),
                                          Text(
                                            "AI Optimized Follow-up Date",
                                            style: TextStyle(
                                              fontSize: 11,
                                              color: Colors.blue,
                                            ),
                                          ),
                                          SizedBox(width: 2),
                                          Tooltip(
                                            message:
                                                "Based on your lead engagement patterns and conversion data",
                                            child: Icon(Icons.info_outline,
                                                size: 12, color: Colors.blue),
                                          ),
                                        ],
                                      ),
                                    ),
                                  TextField(
                                    controller: followUpDateController,
                                    decoration: InputDecoration(
                                      labelText: "Follow-up Date",
                                      labelStyle: TextStyle(fontSize: 13),
                                      prefixIcon:
                                          Icon(Icons.calendar_today, size: 18),
                                      contentPadding: EdgeInsets.symmetric(
                                          vertical: 8, horizontal: 10),
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                    ),
                                    style: TextStyle(fontSize: 13),
                                    readOnly: true,
                                    onTap: () async {
                                      DateTime? pickedDate =
                                          await showDatePicker(
                                        context: context,
                                        initialDate: suggestedDate,
                                        firstDate: DateTime.now(),
                                        lastDate: DateTime.now()
                                            .add(Duration(days: 365)),
                                      );
                                      if (pickedDate != null) {
                                        followUpDateController.text =
                                            "${pickedDate.day}/${pickedDate.month}/${pickedDate.year}";
                                      }
                                    },
                                  ),
                                ],
                              ),
                              SizedBox(height: 12),

                              // Follow-up notes with AI suggestion
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  if (isAiMode.value)
                                    Padding(
                                      padding: const EdgeInsets.only(
                                          bottom: 2.0, left: 2),
                                      child: Row(
                                        children: [
                                          Icon(Icons.auto_awesome,
                                              size: 12, color: Colors.blue),
                                          SizedBox(width: 4),
                                          Text(
                                            "AI Generated Follow-up Notes",
                                            style: TextStyle(
                                              fontSize: 11,
                                              color: Colors.blue,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  TextField(
                                    controller: remarkController,
                                    decoration: InputDecoration(
                                      labelText: "Follow-up Notes",
                                      labelStyle: TextStyle(fontSize: 13),
                                      prefixIcon: Icon(Icons.note, size: 18),
                                      contentPadding: EdgeInsets.symmetric(
                                          vertical: 8, horizontal: 10),
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                      suffixIcon: isAiMode.value
                                          ? IconButton(
                                              iconSize: 18,
                                              icon: Icon(Icons.refresh,
                                                  color: Colors.blue),
                                              tooltip:
                                                  "Generate New AI Suggestion",
                                              onPressed: () {
                                                isProcessing.value = true;
                                                // Simulate AI processing
                                                Future.delayed(
                                                    Duration(milliseconds: 800),
                                                    () {
                                                  // Add your logic here
                                                  isProcessing.value = false;
                                                });
                                              },
                                            )
                                          : null,
                                    ),
                                    style: TextStyle(fontSize: 13),
                                    maxLines: 3,
                                  ),
                                ],
                              ),

                              // AI Lead Opportunity Detection - more compact
                              if (isAiMode.value && status == "Completed")
                                Container(
                                  margin: EdgeInsets.only(top: 12),
                                  padding: EdgeInsets.all(10),
                                  decoration: BoxDecoration(
                                    color: Colors.amber.shade50,
                                    borderRadius: BorderRadius.circular(8),
                                    border: Border.all(
                                        color: Colors.amber.shade200),
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(Icons.emoji_objects,
                                          color: Colors.amber.shade800,
                                          size: 18),
                                      SizedBox(width: 6),
                                      Expanded(
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            Text(
                                              "AI Opportunity Detection",
                                              style: TextStyle(
                                                fontWeight: FontWeight.bold,
                                                color: Colors.amber.shade800,
                                                fontSize: 13,
                                              ),
                                            ),
                                            Text(
                                              "Based on this client's profile, there's a 78% chance they'll be interested in your Premium Package. Consider mentioning it in your follow-up.",
                                              style: TextStyle(
                                                color: Colors.amber.shade900,
                                                fontSize: 12,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),

                              SizedBox(height: 20),
                              // Buttons at the bottom
                              Row(
                                mainAxisAlignment: MainAxisAlignment.end,
                                children: [
                                  TextButton(
                                    onPressed: () {
                                      controller.postStatus(
                                          controller.taskDetails[0].id!,
                                          status);
                                      Navigator.of(context).pop();
                                      Navigator.of(context).pop();
                                    },
                                    child: Text("Only Mark as ${status}",
                                        style: TextStyle(fontSize: 13)),
                                  ),
                                  SizedBox(width: 8),
                                  ElevatedButton(
                                    onPressed: () {
                                      controller.postStatus(
                                          controller.taskDetails[0].id!,
                                          status);
                                      Navigator.of(context).pop();
                                      _showAIConfirmation(
                                          context,
                                          status,
                                          selectedFollowUpType.value,
                                          followUpDateController.text,
                                          remarkController.text,
                                          aiRecommendedPriority.value);
                                    },
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.green,
                                      padding: EdgeInsets.symmetric(
                                          horizontal: 16, vertical: 10),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                    ),
                                    child: Row(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Icon(Icons.check, size: 16),
                                        SizedBox(width: 6),
                                        Text("Save & Schedule",
                                            style: TextStyle(fontSize: 13)),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      // AI Processing Overlay
                      if (isProcessing.value)
                        Container(
                          color: Colors.white.withOpacity(0.7),
                          child: Center(
                            child: Column(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Container(
                                  padding: EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(12),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.1),
                                        blurRadius: 10,
                                      ),
                                    ],
                                  ),
                                  child: Column(
                                    children: [
                                      SizedBox(
                                        width: 40,
                                        height: 40,
                                        child: CircularProgressIndicator(
                                          valueColor:
                                              AlwaysStoppedAnimation<Color>(
                                                  Colors.blue),
                                        ),
                                      ),
                                      SizedBox(height: 16),
                                      Text(
                                        "AI generating content...",
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                    ],
                  )),
            ),
          ),
        );
      },
    );
  }

  void _showAIConfirmation(BuildContext context, String status,
      String followUpType, String followUpDate, String remarks,
      [int priority = 3]) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          elevation: 0,
          backgroundColor: Colors.transparent,
          child: Container(
            width: MediaQuery.of(context).size.width * 0.9,
            padding: EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: Offset(0, 5),
                ),
              ],
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.green.shade50,
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.check_circle,
                    color: Colors.green,
                    size: 48,
                  ),
                ),
                SizedBox(height: 20),
                Text(
                  "AI Follow-up Scheduled!",
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 10),
                Text(
                  "Your task has been marked as $status and a follow-up has been scheduled.",
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.grey.shade700,
                  ),
                ),
                SizedBox(height: 20),
                Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.grey.shade300),
                  ),
                  child: Column(
                    children: [
                      _buildInfoRow("Type", followUpType),
                      Divider(height: 16),
                      _buildInfoRow("Date", followUpDate),
                      Divider(height: 16),
                      _buildInfoRow("Priority", _getPriorityText(priority),
                          _getPriorityColor(priority)),
                      if (remarks.isNotEmpty) ...[
                        Divider(height: 16),
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "Notes: ",
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Expanded(
                              child: Text(remarks),
                            ),
                          ],
                        ),
                      ],
                    ],
                  ),
                ),
                SizedBox(height: 24),
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.shade200),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.auto_awesome, color: Colors.blue),
                      SizedBox(width: 8),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "AI Smart Reminder",
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.blue.shade800,
                              ),
                            ),
                            Text(
                              "You'll receive a notification before the follow-up date with AI-generated talking points and lead insights.",
                              style: TextStyle(
                                color: Colors.blue.shade800,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    minimumSize: Size(double.infinity, 50),
                    // shape: RoundedRectangleBox(
                    //   borderRadius: BorderRadius.circular(8),
                    // ),
                  ),
                  child: Text("Got it"),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildInfoRow(String label, String value, [Color? valueColor]) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          "$label:",
          style: TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          value,
          style: TextStyle(
            color: valueColor,
            fontWeight:
                valueColor != null ? FontWeight.bold : FontWeight.normal,
          ),
        ),
      ],
    );
  }

  Widget buildFollowUpDetails(BuildContext context) {
    return Obx(() {
      // Show loading indicator if data is still loading
      if (controller.isLoadingDetails.value) {
        return Center(
          child: CircularProgressIndicator(),
        );
      }
      final inputDate = controller.taskDetails[0].followUpDateTime;
      if (inputDate != null && inputDate.isNotEmpty) {
        try {
          final inputFormat = DateFormat("MM/dd/yyyy h:mm:ss a");

          final parsedDate = inputFormat.parse(inputDate);

          controller.DateCtlr.text =
              DateFormat('yyyy-MM-dd').format(parsedDate);

          print("Parsed and formatted date: ${controller.DateCtlr.text}");
        } catch (e) {
          print("Error parsing date: $e");
          controller.DateCtlr.text = "";
        }
      } else {
        print("Invalid date string: $inputDate");
        controller.DateCtlr.text = "";
      }
      controller.assignToController.text =
          controller.taskDetails[0].assigntoid ?? "";
      controller.remarkController.text =
          controller.taskDetails[0].followUpRemark ?? "";
      controller.showassignToController.text =
          controller.taskDetails[0].assigntoName ?? "";
      controller.callTypeController.text =
          controller.taskDetails[0].activitytype ?? "";
      controller.callStatusController.text =
          controller.taskDetails[0].status ?? "";
      controller.ReminderCtlr.text =
          controller.taskDetails[0].remindertime ?? "";

      return SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Obx(
              () => CustomSelect(
                label: "Assign to",
                withShadow: false,
                withIcon: true,
                customIcon: Icon(
                  Icons.supervised_user_circle_outlined,
                  size: 28,
                ),
                placeholder: "Assign To",
                mainList: controller.leadAssignToList
                    .map(
                      (element) => CustomSelectItem(
                        id: element.id ?? "",
                        value: element.name ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.assignToController.text = val.id;
                  controller.showassignToController.text = val.value;
                },
                textEditCtlr: controller.showassignToController,
                showLabel: false,
                onTapField: () {
                  controller.assignToController.clear();
                  controller.showassignToController.clear();
                },
              ),
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Date",
              hintText: "Select date",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              enabled: true,
              readOnly: true,
              editingController: controller.DateCtlr,
              onFieldTap: () {
                Get.bottomSheet(
                  CustomDatePicker(
                    pastAllow: true,
                    confirmHandler: (date) async {
                      controller.DateCtlr.text = date ?? "";
                    },
                  ),
                );
              },
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Remark",
              hintText: "Remark",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              editingController: controller.remarkController,
              minLines: 3,
            ),
            SizedBox(
              height: 12,
            ),
            Center(
              child: ElevatedButton(
                onPressed: () {
                  // Save action
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                ),
                child: Text(
                  "Save",
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      );
    });
  }

  Widget buildMeetingDetails(BuildContext context) {
    return Obx(() {
      // Show loading indicator if data is still loading
      if (controller.isLoadingDetails.value) {
        return Center(
          child: CircularProgressIndicator(),
        );
      }

      controller.assignToController.text =
          controller.taskDetails[0].assigntoid ?? "";
      controller.showassignToController.text =
          controller.taskDetails[0].assigntoName ?? "";

      controller.titleController.text = controller.taskDetails[0].title ?? "";
      controller.locationController.text =
          controller.taskDetails[0].address ?? "";
      controller.descriptionController.text =
          controller.taskDetails[0].description ?? "";
      controller.ocRemarkController.text =
          controller.taskDetails[0].remark ?? "";
      final fromDate = controller.taskDetails[0].checkinDatetime;
      final toDate = controller.taskDetails[0].checkoutDatetime;
      if (fromDate != null && fromDate.isNotEmpty) {
        try {
          final inputFormat = DateFormat("MM/dd/yyyy h:mm:ss a");

          final parsedDate = inputFormat.parse(fromDate);

          controller.fromDateCtlr.text =
              DateFormat('yyyy-MM-dd').format(parsedDate);

          print("Parsed and formatted date: ${controller.fromDateCtlr.text}");
        } catch (e) {
          print("Error parsing date: $e");
          controller.fromDateCtlr.text = "";
        }
      } else {
        print("Invalid date string: $fromDate");
        controller.fromDateCtlr.text = "";
      }
      if (toDate != null && toDate.isNotEmpty) {
        try {
          final inputFormat = DateFormat("MM/dd/yyyy h:mm:ss a");

          final parsedDate = inputFormat.parse(toDate);

          controller.toDateController.text =
              DateFormat('yyyy-MM-dd').format(parsedDate);

          print(
              "Parsed and formatted date: ${controller.toDateController.text}");
        } catch (e) {
          print("Error parsing date: $e");
          controller.toDateController.text = "";
        }
      } else {
        print("Invalid date string: $toDate");
        controller.toDateController.text = "";
      }

      return SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            CustomField(
              withShadow: true,
              labelText: "title",
              hintText: "Title",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              editingController: controller.titleController,
            ),
            const SizedBox(height: 16),
            Obx(
              () => CustomSelect(
                label: "Assign to",
                withShadow: false,
                withIcon: true,
                customIcon: Icon(
                  Icons.supervised_user_circle_outlined,
                  size: 28,
                ),
                placeholder: "Assign To",
                mainList: controller.leadAssignToList
                    .map(
                      (element) => CustomSelectItem(
                        id: element.id ?? "",
                        value: element.name ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.assignToController.text = val.id;
                  controller.showassignToController.text = val.value;
                },
                textEditCtlr: controller.showassignToController,
                showLabel: false,
                onTapField: () {
                  controller.assignToController.clear();
                  controller.showassignToController.clear();
                },
              ),
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Date",
              hintText: "From date",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              enabled: true,
              readOnly: true,
              editingController: controller.fromDateCtlr,
              onFieldTap: () {
                Get.bottomSheet(
                  CustomDatePicker(
                    pastAllow: true,
                    confirmHandler: (date) async {
                      controller.fromDateCtlr.text = date ?? "";
                    },
                  ),
                );
              },
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Date",
              hintText: "To date",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              enabled: true,
              readOnly: true,
              editingController: controller.toDateController,
              onFieldTap: () {
                Get.bottomSheet(
                  CustomDatePicker(
                    pastAllow: true,
                    confirmHandler: (date) async {
                      controller.toDateController.text = date ?? "";
                    },
                  ),
                );
              },
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Location",
              hintText: "Location",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              editingController: controller.locationController,
              minLines: 3,
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Description",
              hintText: "Description",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              editingController: controller.descriptionController,
              minLines: 3,
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "OutCome Remark",
              hintText: "OutComeRemark",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              editingController: controller.ocRemarkController,
              minLines: 3,
            ),
            SizedBox(
              height: 12,
            ),
            Center(
              child: ElevatedButton(
                onPressed: () async {
                  // Save meeting details to the backend
                  try {
                    // Show loading or processing state
                    print("Saving meeting details...");

                    // Get the authenticated Google client
                    final authClient = await getGoogleAuthClient();
                    if (authClient == null) {
                      print("Google Sign-In failed or was canceled.");
                      return;
                    }

                    // Schedule the task on Google Calendar
                    await ApiClient().scheduleTaskOnGoogleCalendar(
                      client: authClient,
                      title: controller.titleController.text,
                      location: controller.locationController.text,
                      description: controller.descriptionController.text,
                      startDate: controller.fromDateCtlr.text,
                      endDate: controller.toDateController.text,
                    );

                    print("Meeting saved and scheduled successfully.");
                  } catch (e) {
                    print("Error saving meeting: $e");
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                ),
                child: Text(
                  "Save",
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      );
    });
  }

  Widget buildCallDetails(BuildContext context) {
    return Obx(() {
      // Show loading indicator if data is still loading
      if (controller.isLoadingDetails.value) {
        return Center(
          child: CircularProgressIndicator(),
        );
      }
      print(controller.taskDetails[0].vdate);
      controller.remarkController.text = controller.taskDetails[0].remark ?? "";
      final inputDate = controller.taskDetails[0].vdate;
      if (inputDate != null && inputDate.isNotEmpty) {
        try {
          final inputFormat = DateFormat("MM/dd/yyyy h:mm:ss a");

          final parsedDate = inputFormat.parse(inputDate);

          controller.DateCtlr.text =
              DateFormat('yyyy-MM-dd').format(parsedDate);

          print("Parsed and formatted date: ${controller.DateCtlr.text}");
        } catch (e) {
          print("Error parsing date: $e");
          controller.DateCtlr.text = "";
        }
      } else {
        print("Invalid date string: $inputDate");
        controller.DateCtlr.text = "";
      }
      controller.assignToController.text =
          controller.taskDetails[0].assigntoid ?? "";
      controller.showassignToController.text =
          controller.taskDetails[0].assigntoName ?? "";
      controller.callTypeController.text =
          controller.taskDetails[0].activitytype ?? "";
      controller.callStatusController.text =
          controller.taskDetails[0].status ?? "";
      controller.ReminderCtlr.text =
          controller.taskDetails[0].remindertime ?? "";

      return SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            CustomField(
              withShadow: true,
              labelText: "Date",
              hintText: "Select date",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              enabled: true,
              readOnly: true,
              editingController: controller.DateCtlr,
              onFieldTap: () {
                Get.bottomSheet(
                  CustomDatePicker(
                    pastAllow: true,
                    confirmHandler: (date) async {
                      controller.DateCtlr.text = date ?? "";
                    },
                  ),
                );
              },
            ),
            // const SizedBox(height: 16),
            // CustomField(
            //   withShadow: true,
            //   labelText: "Reminder",
            //   hintText: "Set reminder",
            //   inputAction: TextInputAction.done,
            //   inputType: TextInputType.text,
            //   showLabel: false,
            //   bgColor: Colors.white,
            //   enabled: true,
            //   readOnly: true,
            //   editingController: controller.ReminderCtlr,
            //   onFieldTap: () {
            //     showTimePicker(
            //       context: context,
            //       initialTime: TimeOfDay.now(),
            //     ).then((pickedTime) {
            //       if (pickedTime != null) {
            //         final formattedTime =
            //             "${pickedTime.hour} hours and ${pickedTime.minute} minutes";
            //         controller.ReminderCtlr.text = formattedTime;
            //       }
            //     });
            //   },
            // ),
            const SizedBox(height: 16),
            Obx(
              () => CustomSelect(
                label: "Assign to",
                withShadow: false,
                withIcon: true,
                customIcon: Icon(
                  Icons.supervised_user_circle_outlined,
                  size: 28,
                ),
                placeholder: "Assign To",
                mainList: controller.leadAssignToList
                    .map(
                      (element) => CustomSelectItem(
                        id: element.id ?? "",
                        value: element.name ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.assignToController.text = val.id;
                  controller.showassignToController.text = val.value;
                },
                textEditCtlr: controller.showassignToController,
                showLabel: false,
                onTapField: () {
                  controller.assignToController.clear();
                  controller.showassignToController.clear();
                },
              ),
            ),
            const SizedBox(height: 16),
            Obx(
              () => CustomSelect(
                label: "Call Type",
                withShadow: false,
                withIcon: true,
                customIcon: Icon(
                  Icons.supervised_user_circle_outlined,
                  size: 28,
                ),
                placeholder: "Call Type",
                mainList: controller.calltype
                    .map(
                      (element) => CustomSelectItem(
                        id: element.value ?? "",
                        value: element.status ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.callTypeController.text = val.value;
                },
                textEditCtlr: controller.callTypeController,
                showLabel: false,
                onTapField: () {
                  controller.callTypeController.clear();
                },
              ),
            ),
            const SizedBox(height: 16),
            Obx(
              () => CustomSelect(
                label: "Call Status",
                withShadow: false,
                withIcon: true,
                customIcon: Icon(
                  Icons.supervised_user_circle_outlined,
                  size: 28,
                ),
                placeholder: "Call Status",
                mainList: controller.callstatus
                    .map(
                      (element) => CustomSelectItem(
                        id: element.value ?? "",
                        value: element.status ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.callStatusController.text = val.value;
                },
                textEditCtlr: controller.callStatusController,
                showLabel: false,
                onTapField: () {
                  controller.callStatusController.clear();
                },
              ),
            ),
            const SizedBox(height: 16),
            CustomField(
              withShadow: true,
              labelText: "Remark",
              hintText: "Remark",
              inputAction: TextInputAction.done,
              inputType: TextInputType.datetime,
              showLabel: false,
              bgColor: Colors.white,
              editingController: controller.remarkController,
              minLines: 3,
            ),
            SizedBox(
              height: 12,
            ),
            Center(
              child: ElevatedButton(
                onPressed: () {
                  // Save action
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                ),
                child: Text(
                  "Save",
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
            ),
          ],
        ),
      );
    });
  }

// Function to launch the phone dialer
  void _launchPhone(String phoneNumber) async {
    final url = 'tel:$phoneNumber';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

// Function to launch WhatsApp
  void _launchWhatsApp(String phoneNumber) async {
    final url = 'https://wa.me/$phoneNumber';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch WhatsApp';
    }
  }

// Function to send an SMS
  void _launchSMS(String phoneNumber) async {
    final url = 'sms:$phoneNumber';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not send SMS';
    }
  }

// Function to launch email client
  void _launchMail(String email) async {
    final url = 'mailto:$email';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch email client';
    }
  }

// Function to share content
  void _shareContent() async {
    await Share.share('Check out this task detail!');
  }
}

class AILeadAnalyticsController extends GetxController {
  // Returns the optimal number of days to wait before following up based on historical data
  int getOptimalFollowUpDays(
      {required String status, required String leadType}) {
    // In a real implementation, this would use ML models to analyze historical data
    // For this demonstration, we're using hardcoded values
    Map<String, Map<String, int>> optimalDays = {
      "Completed": {
        "Enterprise": 14,
        "SMB": 10,
        "Startup": 7,
        "Individual": 21,
      },
      "Cancelled": {
        "Enterprise": 30,
        "SMB": 14,
        "Startup": 7,
        "Individual": 21,
      },
      "Pending": {
        "Enterprise": 3,
        "SMB": 2,
        "Startup": 1,
        "Individual": 4,
      },
      "In Progress": {
        "Enterprise": 5,
        "SMB": 3,
        "Startup": 2,
        "Individual": 4,
      }
    };

    // Default values if specific combination not found
    if (!optimalDays.containsKey(status)) return 7;
    if (!optimalDays[status]!.containsKey(leadType))
      return optimalDays[status]!.values.first;

    return optimalDays[status]![leadType]!;
  }

  // Generates personalized follow-up notes based on lead data
  String generateSmartFollowUpNote({
    required String status,
    required String leadName,
    required String leadType,
    required List<String> previousInteractions,
    double engagementScore = 0.0,
  }) {
    // In a real implementation, this would use NLP to generate personalized notes
    // For this demonstration, we're using templates

    switch (status) {
      case "Completed":
        return "Task completed successfully with $leadName. Based on their engagement history and similar $leadType clients, recommended follow-up to discuss additional solutions that align with their business needs. Previous interactions show interest in our premium features.";

      case "Cancelled":
        return "Task cancelled with $leadName. Analysis of similar $leadType clients shows 42% can be re-engaged with a personalized approach addressing their specific concerns. Previous interactions suggest focus on ${_getLeadPainPoint(previousInteractions)}.";

      case "Pending":
        return "Follow up with $leadName about pending task. Based on engagement patterns for $leadType clients, recommend emphasizing key benefits and addressing potential objections about pricing. Provide case studies of similar companies.";

      case "In Progress":
        return "Check status with $leadName on ongoing task. Data from similar $leadType clients indicates providing additional resources at this stage increases completion rates by 27%. Consider sharing relevant documentation.";

      default:
        return "Follow up with $leadName based on recent interactions. Analyze their needs and prepare personalized solutions for the next discussion.";
    }
  }

  // Generates an alternative follow-up note when the user requests a refresh
  String generateAlternativeFollowUpNote({
    required String status,
    required String leadName,
    required String leadType,
    required List<String> previousInteractions,
  }) {
    // In a real implementation, this would generate a different note using NLP
    // For this demonstration, we're using alternative templates

    switch (status) {
      case "Completed":
        return "Follow up with $leadName to gather feedback on completed task. Their profile matches our ideal customer persona for upselling opportunities. Consider discussing how our advanced features could address their specific business challenge of ${_getLeadPainPoint(previousInteractions)}.";

      case "Cancelled":
        return "Re-engage with $leadName to understand reasons for cancellation. Similar $leadType clients have responded well to alternative offerings that address their specific pain points. Focus conversation on value proposition and ROI.";

      case "Pending":
        return "Check in with $leadName on pending decision. Analytics suggest that $leadType clients typically need additional information about implementation timeline and support options before converting. Prepare answers to potential technical questions.";

      case "In Progress":
        return "Touch base with $leadName on progress. Based on engagement patterns, now is an optimal time to discuss next steps and address any potential roadblocks. Consider offering a quick demo of recently added features.";

      default:
        return "Schedule follow-up with $leadName to maintain engagement. Based on their interaction history, they may be interested in our new solutions for ${_getLeadInterest(previousInteractions)}.";
    }
  }

  // Calculate lead priority based on various factors
  int calculateLeadPriority({
    required String status,
    required double leadValue,
    required int conversionProbability,
    required String industry,
  }) {
    // In a real implementation, this would use a scoring algorithm
    // For this demonstration, we're using a simplified approach

    // Base priority based on status
    int basePriority = status == "Completed"
        ? 3
        : status == "In Progress"
            ? 4
            : status == "Pending"
                ? 3
                : 2;

    // Adjust based on lead value
    if (leadValue > 10000) basePriority++;
    if (leadValue < 1000) basePriority--;

    // Adjust based on conversion probability
    if (conversionProbability > 75) basePriority++;
    if (conversionProbability < 25) basePriority--;

    // Ensure priority is within valid range
    return basePriority.clamp(1, 5);
  }

  // Helper methods to extract insights from previous interactions
  String _getLeadPainPoint(List<String> interactions) {
    // In a real implementation, this would use NLP to analyze conversations
    // For this demonstration, we're returning placeholder values
    List<String> painPoints = [
      "budget constraints",
      "implementation timeline",
      "technical integration",
      "team adoption",
      "scalability concerns"
    ];

    return painPoints[DateTime.now().microsecond % painPoints.length];
  }

  String _getLeadInterest(List<String> interactions) {
    // In a real implementation, this would use NLP to analyze conversations
    // For this demonstration, we're returning placeholder values
    List<String> interests = [
      "automation features",
      "reporting capabilities",
      "mobile integration",
      "team collaboration tools",
      "API access"
    ];

    return interests[DateTime.now().microsecond % interests.length];
  }
}
