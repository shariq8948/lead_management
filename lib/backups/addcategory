import 'dart:convert'; // For base64 encoding
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';
import 'package:leads/widgets/customActionbutton.dart';
import 'package:leads/widgets/custom_app_bar.dart';
import 'package:scroll_date_picker/scroll_date_picker.dart';
import '../../data/models/categorymodel.dart';
import '../../widgets/custom_loader.dart';
import '../../widgets/custom_select.dart';
import '../../widgets/custom_text_field.dart';
import 'category_controller.dart';

class AddCategoryPage extends StatelessWidget {
  final CategoryController controller = Get.put(CategoryController());

  final CategoryList? category;
  final String? catId;
  AddCategoryPage({super.key, this.category, this.catId});

  final _formKey = GlobalKey<FormState>();

  Future<void> pickImage(ImageSource source, RxString target) async {
    final ImagePicker picker = ImagePicker();
    final XFile? pickedFile = await picker.pickImage(source: source);

    if (pickedFile != null) {
      final bytes = await pickedFile.readAsBytes();
      target.value = "data:image/jpeg;base64," + base64Encode(bytes);
    }
  }

  @override
  Widget build(BuildContext context) {
    if (category != null && catId != null) {
      controller.fetchCategoryDetails(catId!);

      controller.nameController.text = category!.name;
      controller.descriptionController.text = category!.description ?? "";
      controller.mainCategoryController.text = category!.id;
      controller.showMainCategoryController.text =
          category!.ucategory ?? "Primary";
      controller.iconImageBase64.value =
          "http://lead.mumbaicrm.com/${category!.bannerimg}" ?? '';
      controller.bannerImageBase64.value =
          "http://lead.mumbaicrm.com/${category!.bannerimg}" ?? '';
    } else {
      controller.nameController.clear();
      controller.descriptionController.clear();
      controller.mainCategoryController.clear();
      controller.showMainCategoryController.text = "Primary"; // Default value
      controller.iconImageBase64.value = '';
      controller.bannerImageBase64.value = '';
    }

    return GestureDetector(
      onTap: () {
        FocusScope.of(context).requestFocus(FocusNode());
      },
      child: Scaffold(
        // appBar: CustomAppBar(
        //   title: Text(category == null ? "Add Category" : "Update Category"),
        //   isBack: true,
        // ),
        body: SafeArea(
          child: SingleChildScrollView(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  CustomTextField(
                    labelText: "Name",
                    hintText: "Enter name",
                    textController: controller.nameController,
                    fillColor: Colors.white,
                  ),
                  const SizedBox(height: 16),
                  Obx(
                    () => CustomSelect(
                      label: "Main Category",
                      placeholder: "Primary",
                      mainList: [
                        // Add the default option "Primary" at the beginning
                        CustomSelectItem(id: '0', value: 'Primary'),
                        ...controller.mainCategories.map(
                          (element) => CustomSelectItem(
                            id: element.id,
                            value: element.name,
                          ),
                        )
                      ],
                      onSelect: (val) async {
                        controller.mainCategoryController.text = val.id;
                        controller.showMainCategoryController.text = val.value;
                      },
                      textEditCtlr: controller.showMainCategoryController,
                      showLabel: true,
                      onTapField: () {
                        controller.mainCategoryController.clear();
                        controller.showMainCategoryController.clear();
                      },
                    ),
                  ),
                  const SizedBox(height: 16),
                  CustomTextField(
                    labelText: "Description",
                    hintText: "Enter description",
                    textController: controller.descriptionController,
                    maxLines: 3,
                    fillColor: Colors.white,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return "Please enter a description";
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    "Add Attachment",
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  Row(
                    children: [
                      Expanded(
                        child: Obx(
                          () => OutlinedButton(
                            style: OutlinedButton.styleFrom(
                              side: const BorderSide(color: Colors.orange),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                            onPressed: () => pickImage(ImageSource.gallery,
                                controller.iconImageBase64),
                            child: controller.iconImageBase64.isEmpty
                                ? Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: const [
                                      Icon(Icons.attach_file,
                                          color: Colors.orange),
                                      SizedBox(width: 8),
                                      Text(
                                        "Logo Image",
                                        style: TextStyle(
                                          color: Colors.orange,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ],
                                  )
                                : _buildImageWidget(
                                    controller.iconImageBase64.value),
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(
                    height: 4,
                  ),
                  Row(
                    children: [
                      Expanded(
                        child: Obx(
                          () => OutlinedButton(
                            style: OutlinedButton.styleFrom(
                              side: const BorderSide(color: Colors.blue),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                            onPressed: () => pickImage(ImageSource.gallery,
                                controller.bannerImageBase64),
                            child: controller.bannerImageBase64.isEmpty
                                ? Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: const [
                                      Icon(Icons.attach_file,
                                          color: Colors.blue),
                                      SizedBox(width: 8),
                                      Text(
                                        "Banner Image",
                                        style: TextStyle(
                                          color: Colors.blue,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ],
                                  )
                                : _buildImageWidget(
                                    controller.bannerImageBase64.value),
                          ),
                        ),
                      ),
                    ],
                  ),

                  /// Helper function to build an image widget with error handling.

                  const SizedBox(height: 16),
                  SizedBox(
                    width: double.infinity,
                    child: Obx(() {
                      if (controller.isSaving.value) {
                        return ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFFFFA726),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            padding: const EdgeInsets.symmetric(vertical: 16),
                          ),
                          onPressed: null,
                          child: CustomLoader(),
                        );
                      } else {
                        return (category != null)
                            ? CustomActionButton(
                                type: CustomButtonType.edit,
                                onPressed: () {
                                  controller.updateCategory(
                                      category!.id, category!.code);
                                },
                                label: "Edit Category")
                            : CustomActionButton(
                                type: CustomButtonType.save,
                                onPressed: () {
                                  controller.saveCategory();
                                },
                                label: "Save Category");
                      }
                    }),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildImageWidget(String imageSource) {
    if (imageSource.startsWith('http')) {
      // Network image handling
      return Image.network(
        imageSource,
        fit: BoxFit.cover,
        height: 100, // Adjust height as needed
        errorBuilder: (context, error, stackTrace) {
          return const Center(
            child: Icon(
              Icons.broken_image,
              color: Colors.red,
              size: 50,
            ),
          );
        },
      );
    } else {
      // Base64 image handling
      try {
        final bytes = base64Decode(imageSource.split(',').last);
        return Image.memory(
          bytes,
          fit: BoxFit.cover,
          height: 100, // Adjust height as needed
          errorBuilder: (context, error, stackTrace) {
            return const Center(
              child: Icon(
                Icons.broken_image,
                color: Colors.red,
                size: 50,
              ),
            );
          },
        );
      } catch (e) {
        return const Center(
          child: Icon(
            Icons.broken_image,
            color: Colors.red,
            size: 100,
          ),
        );
      }
    }
  }
}
