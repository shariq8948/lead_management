import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';
import 'package:leads/Masters/productEntry/productListController.dart';
import 'package:leads/widgets/custom_button.dart';
import 'package:leads/widgets/custom_field.dart';
import 'package:leads/widgets/custom_select.dart';

class ProductEntryPage extends StatelessWidget {
  ProductEntryPage({super.key});
  final controller = Get.find<Productlistcontroller>();
  Future<void> pickImage(ImageSource source, RxString target) async {
    final ImagePicker picker = ImagePicker();
    final XFile? pickedFile = await picker.pickImage(source: source);

    if (pickedFile != null) {
      final bytes = await pickedFile.readAsBytes();
      target.value = "data:image/jpeg;base64," + base64Encode(bytes);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Product Entry"),
      ),
      body: SafeArea(
          child: SingleChildScrollView(child: _buildProductEntryForm())),
    );
  }

  Widget _buildProductEntryForm() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Form(
        key: controller.formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Product Name Field
            CustomField(
              hintText: "Enter Product Name",
              labelText: "Product",
              inputAction: TextInputAction.next,
              inputType: TextInputType.text,
              editingController: controller.nameController,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a product name';
                }
                return null;
              },
            ),
            SizedBox(height: 10),

            // Unit Selection
            Obx(
              () => CustomSelect(
                label: "Select Unit",
                placeholder: "Please select a Unit",
                mainList: controller.units
                    .map(
                      (element) => CustomSelectItem(
                        id: element!.id ?? "",
                        value: element?.uName ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.unitController.text = val.id;
                  controller.showUnitController.text = val.value;
                },
                textEditCtlr: controller.showUnitController,
                showLabel: false,
                onTapField: () {
                  controller.unitController.clear();
                  controller.showUnitController.clear();
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a unit';
                  }
                  return null;
                },
              ),
            ),
            SizedBox(height: 10),

            // SGST and PGST Selectors
            Row(
              children: [
                // SGST
                Expanded(
                  flex: 2,
                  child: Obx(
                    () => CustomSelect(
                      label: "Sale Gst",
                      placeholder: "Please select Sgst",
                      mainList: controller.sgst
                          .map(
                            (element) => CustomSelectItem(
                              id: element!.id ?? "",
                              value: element?.stax ?? "",
                            ),
                          )
                          .toList(),
                      onSelect: (val) async {
                        controller.sgstController.text = val.id;
                        controller.showsgstController.text = val.value;
                      },
                      textEditCtlr: controller.showsgstController,
                      showLabel: false,
                      onTapField: () {
                        controller.sgstController.clear();
                        controller.showsgstController.clear();
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please select SGST';
                        }
                        return null;
                      },
                    ),
                  ),
                ),
                SizedBox(width: 4),
                // PGST
                Expanded(
                  flex: 2,
                  child: Obx(
                    () => CustomSelect(
                      label: "Purchase Gst",
                      placeholder: " Purchase gst",
                      mainList: controller.pgst
                          .map(
                            (element) => CustomSelectItem(
                              id: element!.id ?? "",
                              value: element?.ptax ?? "",
                            ),
                          )
                          .toList(),
                      onSelect: (val) async {
                        controller.pgstController.text = val.id;
                        controller.showpgstController.text = val.value;
                      },
                      textEditCtlr: controller.showpgstController,
                      showLabel: false,
                      onTapField: () {
                        controller.pgstController.clear();
                        controller.showpgstController.clear();
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please select PGST';
                        }
                        return null;
                      },
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 10),

            // Discount and HSN Code Fields
            Row(
              children: [
                // Discount Percentage
                Expanded(
                  flex: 2,
                  child: CustomField(
                    hintText: "Discount %",
                    labelText: "Discount",
                    inputAction: TextInputAction.next,
                    inputType: TextInputType.number,
                    editingController: controller.discountController,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a discount percentage';
                      }
                      return null;
                    },
                  ),
                ),
                SizedBox(width: 4),
                // HSN Code
                Expanded(
                  flex: 2,
                  child: Obx(
                    () => CustomSelect(
                      label: "HSN",
                      placeholder: "HSN",
                      mainList: controller.hsn
                          .map(
                            (element) => CustomSelectItem(
                              id: element!.id ?? "",
                              value: element?.shortName ?? "",
                            ),
                          )
                          .toList(),
                      onSelect: (val) async {
                        controller.hsnController.text = val.id;
                        controller.showhsnController.text = val.value;
                      },
                      textEditCtlr: controller.showhsnController,
                      showLabel: false,
                      onTapField: () {
                        controller.hsnController.clear();
                        controller.showhsnController.clear();
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please select an HSN code';
                        }
                        return null;
                      },
                    ),
                  ),
                ),
              ],
            ),
            SizedBox(height: 10),

            // Company and Category Selectors
            Obx(
              () => CustomSelect(
                label: "Company",
                placeholder: "Company",
                mainList: controller.company
                    .map(
                      (element) => CustomSelectItem(
                        id: element!.id ?? "",
                        value: element?.name ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.comapnyController.text = val.id;
                  controller.showCompanyController.text = val.value;
                },
                textEditCtlr: controller.showCompanyController,
                showLabel: false,
                onTapField: () {
                  controller.comapnyController.clear();
                  controller.showCompanyController.clear();
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a company';
                  }
                  return null;
                },
              ),
            ),
            SizedBox(height: 10),

            Obx(
              () => CustomSelect(
                label: "Category",
                placeholder: "Category",
                mainList: controller.category
                    .map(
                      (element) => CustomSelectItem(
                        id: element!.id ?? "",
                        value: element?.name ?? "",
                      ),
                    )
                    .toList(),
                onSelect: (val) async {
                  controller.categoryController.text = val.id;
                  controller.showCategoryController.text = val.value;
                },
                textEditCtlr: controller.showCategoryController,
                showLabel: false,
                onTapField: () {
                  controller.categoryController.clear();
                  controller.showCategoryController.clear();
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a category';
                  }
                  return null;
                },
              ),
            ),
            SizedBox(height: 10),

            // Product Property (Title) Field
            CustomSelect(
              mainList: controller.titleItems,
              onSelect: (selectedItem) {
                controller.titleController.text = selectedItem.value;
              },
              placeholder: 'Product Property',
              label: 'Product Property',
              textEditCtlr: controller.titleController,
              showLabel: false,
              filledColor: Colors.white,
              labelColor: Colors.black,
              withShadow: true,
            ),
            SizedBox(height: 10),

            // Remark Field
            CustomField(
              hintText: "Remark",
              labelText: "Remark",
              inputAction: TextInputAction.next,
              inputType: TextInputType.text,
              minLines: 3,
            ),
            SizedBox(height: 10),

            // Remark Field
            CustomField(
              hintText: "MRP",
              labelText: "MRP",
              inputAction: TextInputAction.next,
              inputType: TextInputType.number,
              editingController: controller.mrpController,
            ),

            // Additional Information Section (No validation)
            ExpansionTile(
              title: Text(
                "Additional Information",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              children: [
                CustomField(
                  hintText: "Bar Code",
                  labelText: "Bar Code",
                  inputAction: TextInputAction.next,
                  inputType: TextInputType.text,
                  editingController: controller.barcodeController,
                ),
                SizedBox(height: 10),
                CustomSelect(
                  mainList: controller.sizecategoryItems,
                  onSelect: (selectedItem) {
                    controller.sizeController.text = selectedItem.value;
                  },
                  placeholder: 'Size Category',
                  label: 'Product Property',
                  textEditCtlr: controller.sizeController,
                  showLabel: false,
                  filledColor: Colors.white,
                  labelColor: Colors.black,
                  withShadow: true,
                ),
                SizedBox(height: 10),
                Row(
                  children: [
                    // Min Order Qty
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Min.Order Qty",
                        labelText: "Min.Order Qty",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.number,
                        editingController: controller.minQtyController,
                      ),
                    ),
                    SizedBox(width: 4),
                    // Max Order Qty
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Max.Order Qty",
                        labelText: "Max.Order Qty",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.number,
                        editingController: controller.maxQtyController,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 10),
                Row(
                  children: [
                    // Min Level
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Min Level",
                        labelText: "Min Level",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.number,
                        editingController: controller.minLevelController,
                      ),
                    ),
                    SizedBox(width: 4),
                    // Max Level
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Max Level",
                        labelText: "Max Level",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.number,
                        editingController: controller.maxLevelController,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 10),
                Row(
                  children: [
                    // Remark 1
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Remark 1",
                        labelText: "Remark 1",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.text,
                        editingController: controller.remark1Controller,
                      ),
                    ),
                    SizedBox(width: 4),
                    // Remark 2
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Remark 2",
                        labelText: "Remark 2",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.text,
                        editingController: controller.remark2Controller,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 10),
                Row(
                  children: [
                    // Remark 1
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Remark 3",
                        labelText: "Remark 3",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.text,
                        editingController: controller.remark3Controller,
                      ),
                    ),
                    SizedBox(width: 4),
                    // Remark 2
                    Expanded(
                      flex: 2,
                      child: CustomField(
                        hintText: "Remark 4",
                        labelText: "Remark 4",
                        inputAction: TextInputAction.next,
                        inputType: TextInputType.text,
                        editingController: controller.remark4Controller,
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 4,
                ),
                Row(
                  children: [
                    Expanded(
                      child: Obx(
                        () => OutlinedButton(
                          style: OutlinedButton.styleFrom(
                            side: const BorderSide(color: Colors.orange),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                          onPressed: () => pickImage(
                              ImageSource.gallery, controller.iconImageBase64),
                          child: controller.iconImageBase64.isEmpty
                              ? Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: const [
                                    Icon(Icons.attach_file,
                                        color: Colors.orange),
                                    SizedBox(width: 8),
                                    Text(
                                      "Logo Image",
                                      style: TextStyle(
                                        color: Colors.orange,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                )
                              : _buildImageWidget(
                                  controller.iconImageBase64.value),
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 4,
                ),
                Row(
                  children: [
                    Expanded(
                      child: Obx(
                        () => OutlinedButton(
                          style: OutlinedButton.styleFrom(
                            side: const BorderSide(color: Colors.blue),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                          onPressed: () => pickImage(ImageSource.gallery,
                              controller.bannerImageBase64),
                          child: controller.bannerImageBase64.isEmpty
                              ? Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: const [
                                    Icon(Icons.attach_file, color: Colors.blue),
                                    SizedBox(width: 8),
                                    Text(
                                      "Banner Image",
                                      style: TextStyle(
                                        color: Colors.blue,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                )
                              : _buildImageWidget(
                                  controller.bannerImageBase64.value),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
            SizedBox(height: 10),

            // Save Button
            CustomButton(
              onPressed: () {
                if (controller.formKey.currentState!.validate()) {
                  if (controller.isEdit.value) {
                    controller.updateProduct();
                  } else {
                    controller.addProduct();
                  }
                }
              },
              buttonType: ButtonTypes.primary,
              width: Get.size.width,
              text: (controller.isEdit.value) ? "Update" : "Save",
              bgColor: Colors.orange,
            ),
            // Padding(
            //   padding: const EdgeInsets.symmetric(vertical: 16.0),
            //   child: ElevatedButton(
            //     onPressed: () {
            //       if (controller.formKey.currentState!.validate()) {
            //         controller.addProduct();
            //       }
            //     },
            //     child: Text("Save"),
            //   ),
            // ),
          ],
        ),
      ),
    );
  }

  Widget _buildImageWidget(String imageSource) {
    if (imageSource.startsWith('http')) {
      // Network image handling
      return Image.network(
        imageSource,
        fit: BoxFit.cover,
        height: 100, // Adjust height as needed
        errorBuilder: (context, error, stackTrace) {
          return const Center(
            child: Icon(
              Icons.broken_image,
              color: Colors.red,
              size: 50,
            ),
          );
        },
      );
    } else {
      // Base64 image handling
      try {
        final bytes = base64Decode(imageSource.split(',').last);
        return Image.memory(
          bytes,
          fit: BoxFit.cover,
          height: 100, // Adjust height as needed
          errorBuilder: (context, error, stackTrace) {
            return const Center(
              child: Icon(
                Icons.broken_image,
                color: Colors.red,
                size: 50,
              ),
            );
          },
        );
      } catch (e) {
        return const Center(
          child: Icon(
            Icons.broken_image,
            color: Colors.red,
            size: 100,
          ),
        );
      }
    }
  }
}
