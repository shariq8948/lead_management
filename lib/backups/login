  Future<void> login() async {
    try {
      // Validate form input and ensure the domain is selected
      if (loginFormKey.currentState!.validate() &&
          selectedDomain.value != null) {
        loading.value = true;

        // Trigger Google Sign-In (to ensure Google authentication)
        final googleUser = await signInWithGoogle();
        if (googleUser == null) {
          // Show error if Google Sign-In fails
          CustomSnack.show(
            content: "Google Sign-In failed. Please try again.",
            snackType: SnackType.error,
          );
          loading.value = false;
          return;
        }

        // Print Google Sign-In success for debugging purposes
        print("Google Sign-In Successful: ${googleUser.email}");

        // Proceed with backend login using user-provided credentials
        String domainText = selectedDomain.value?.id ?? "";
        String emailText = emailController.text.trim(); // Email from user input
        String passwordText =
            passwordController.text.trim(); // Password from user input

        print("Selected Domain: $domainText");
        print("Backend Login Email: $emailText");

        // Update base URL
        await apiClient.updateBaseUrl(domainText);

        // Create login request payload
        var loginBody = {
          "Login": emailText, // Email from the text field
          "Password": passwordText, // Password from the text field
        };

        // Perform backend login
        LoginResponse response = await apiClient.loginRequest(
          ApiEndpoints.login,
          loginBody,
        );

        loading.value = false;

        // Handle successful login response
        if (response.message != null) {
          await box.write(
              StorageTags.userDetails, jsonEncode(response.toJson()));
          await box.write(StorageTags.userId, response.userId);
          await box.write(StorageTags.sysComapnyId, response.syscompanyid);
          await box.write(StorageTags.sysBranchId, response.sysbranchid);
          await box.write(
            StorageTags.baseComp,
            jsonEncode({
              "id": selectedDomain.value?.id,
              "value": selectedDomain.value?.value,
            }),
          );
          await box.write(StorageTags.loggedIn, "yes");

          // Navigate to main screen
          Get.offAllNamed("/main");

          // Show success message
          CustomSnack.show(
            content: "Logged in successfully!",
            snackType: SnackType.success,
          );
        } else {
          // Show error message from the response
          CustomSnack.show(
            content: response.message ?? "Login failed.",
            snackType: SnackType.error,
            behavior: SnackBarBehavior.floating,
          );
        }
      }
    } catch (e, stackTrace) {
      // Handle any errors during login
      loading.value = false;
      print("Login error: $e");
      if (kDebugMode) {
        print(stackTrace);
      }
      CustomSnack.show(
        content: "An unexpected error occurred during login.",
        snackType: SnackType.error,
      );
    }
  }
  Future<LoginResponse> loginRequest(
      String endpoint, Map<String, dynamic> body) async {
    try {
      print(endpoint);
      final response = await dio.post(endpoint, data: jsonEncode(body));

      if (response.statusCode == 200) {
        final data = response.data;
        if (data is List && data.isNotEmpty) {
          final loginResponse = LoginResponse.fromJson(data[0]);
          if (loginResponse.success == '1') {
            return loginResponse; // Return successful login response
          } else {
            return LoginResponse(
                message: loginResponse.message ?? "Login failed.");
          }
        } else {
          return LoginResponse(message: "Unexpected response format.");
        }
      } else {
        return LoginResponse(
            message: "Login failed with status code: ${response.statusCode}");
      }
    } catch (e) {
      return LoginResponse(message: "Error: $e");
    }
  }



//Screen


import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import '../../utils/constants.dart';
import '../../utils/tags.dart';
import '../../widgets/custom_button.dart';
import '../../widgets/custom_select.dart';
import '../../widgets/custom_text_field.dart';
import 'login_controller.dart';

class LoginScreen extends StatelessWidget {
  LoginScreen({super.key});
  var box = GetStorage();
  // Login Screen Controller
  final controller = Get.find<LoginController>();

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        backgroundColor: bgColor,
        body: SafeArea(
          child: Container(
            height: size.height,
            width: size.width,
            padding: const EdgeInsets.symmetric(horizontal: 26, vertical: 24),
            child: SingleChildScrollView(
              child: IntrinsicHeight(
                child: Column(
                  mainAxisSize: MainAxisSize.max,
                  children: [
                    const SizedBox(height: 80),

                    // Logo
                    Image.asset(
                      "assets/images/login.png",
                      fit: BoxFit.fitWidth,
                    ),

                    const SizedBox(height: 60),

                    Form(
                      key: controller.loginFormKey,
                      autovalidateMode: AutovalidateMode.always,
                      child: Column(
                        mainAxisSize: MainAxisSize.max,
                        children: [
                          CustomSelect(
                            withShadow: false,
                            label: "Select Domain",
                            suggestionFn: (search) async {
                              if (search.length >= 3) {
                                var data = await controller
                                    .fetchDomains(search.toString().trim());
                                if (data != null) {
                                  return data
                                      .map(
                                        (e) => CustomSelectItem(
                                          id: e.domainUrl ?? "",
                                          value: e.companyName ?? "",
                                        ),
                                      )
                                      .toList();
                                }

                                return [];
                              }

                              return [];
                            },
                            placeholder: "Please select a domain",
                            mainList: const [],
                            onSelect: (val) async {
                              FocusScope.of(context).unfocus();
                              controller.domainController.text = val.value;
                              controller.selectedDomain.value = val;
                            },
                            textEditCtlr: controller.domainController,
                            showLabel: true,
                            onTapField: () {
                              controller.domainController.clear();
                            },
                            validator: (value) {
                              if (value!.isEmpty) {
                                return "Please select a domain";
                              }

                              return null;
                            },
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          CustomTextField(
                            labelText: "Email",
                            hintText: "Enter your email address",
                            textController: controller.emailController,
                            keyboardType: TextInputType.emailAddress,
                            validator: (value) {
                              if (value!.isEmpty) {
                                return "This field is required";
                              }



                              return null;
                            },
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          Obx(
                            () => CustomTextField(
                              labelText: "Password",
                              hintText: "Enter your password",
                              textController: controller.passwordController,
                              secure: true,
                              showPass: controller.showPass.value,
                              showPassFn: () => controller.showPass.toggle(),
                              passwordField: true,
                              validator: (value) {
                                if (value!.isEmpty) {
                                  return "This field is required";
                                }

                                return null;
                              },
                            ),
                          ),
                          const SizedBox(
                            height: 12,
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 40),

                    Obx(
                      () => CustomButton(
                        onPressed: () {
                          FocusScope.of(context).unfocus();
                          controller.login(); // Call login method
                        },
                        buttonType: ButtonTypes.primary,
                        width: Get.size.width * 0.6,
                        text: "Login",
                        enabled: true,
                        loading: controller.loading.value,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
Splash


import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:leads/splash/splash_controller.dart';

import '../utils/constants.dart';

class SplashScreen extends StatelessWidget {
  SplashScreen({super.key});

  // Splash Screen Controller
  final controller = Get.find<SplashController>();

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Scaffold(
      backgroundColor: bgColor,
      body: Container(
        height: size.height,
        width: size.width,
        padding: const EdgeInsets.all(18.0),
        child: Center(
          child: Obx(
                () => AnimatedOpacity(
              opacity: controller.animate.value ? 1 : 0,
              duration: const Duration(milliseconds: 500),
              child: Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                ),
                child: Image.asset(
                  "assets/images/MumbaiCRM.png",
                  fit: BoxFit.fitWidth,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:leads/data/api/api_client.dart';

import '../utils/tags.dart';

class SplashController extends GetxController {
  RxBool animate = false.obs;
  // Get Launch Screen
  Future<String> getLaunchScreen() async {
    final GetStorage box = Get.find<GetStorage>(tag: StorageTags.tag);
    String? loggedIn = box.read(StorageTags.loggedIn);

    String finalRoute = loggedIn == "yes" ? "/main" : "/login";
    return finalRoute;
  }

  // Start animation
  void startAnimation() async {
    await Future.delayed(const Duration(milliseconds: 500));
    animate.value = true;
    final routeName = await getLaunchScreen();
    await Future.delayed(const Duration(milliseconds: 2500));
    Get.offAllNamed(routeName);
  }

  @override
  void onReady() {
    startAnimation();
    super.onReady();
  }
}
