import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:flutter_zoom_drawer/flutter_zoom_drawer.dart';
import 'package:get/get.dart';
import 'package:leads/alltasks/all_task_page.dart';
import 'package:leads/data/models/graph-model.dart';
import 'package:leads/leads/leadlist/lead_list_page.dart';
import 'package:leads/notifications/notifications_page.dart';
import 'package:leads/profile_pages/employee_profile/employee_detail.dart';
import 'package:leads/widgets/custom_date_picker.dart';
import 'package:leads/widgets/custom_field.dart';

import 'package:syncfusion_flutter_charts/charts.dart';
import '../../Tasks/taskDeatails/task_details_page.dart';
import '../../auth/login/login_controller.dart';
import '../../data/models/lead_list.dart';
import '../../google_service/demo_calender.dart';
import '../../leads/create_lead/create_lead_page.dart';
import '../../meeting/meeting_page.dart';
import '../../navbar/bottom_nav_bar.dart';
import '../../notifications/notification_controller.dart';
import '../../utils/constants.dart';
import '../../utils/routes.dart';
import '../../widgets/custom_drawer.dart';
import '../../widgets/custom_loader.dart';
import '../../widgets/custom_task_card.dart';
import 'admin_panel_controller.dart';
import 'homepage_controller.dart';
import 'package:badges/badges.dart' as badges;

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen>
    with SingleTickerProviderStateMixin {
  final NotificationController notificationController =
      Get.put(NotificationController());
  final AdminPanelController controlleradmin = Get.put(AdminPanelController());

  final LoginController controller2 = Get.find<LoginController>();
  final HomeController controller =
      Get.put(HomeController()); // Initialize controller
  late AnimationController
      _animationController; // Declare the animation controller
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  final ZoomDrawerController _zoomDrawerController = ZoomDrawerController();

  @override
  void initState() {
    super.initState();
    // Initialize the Animation Controller
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
  }

  @override
  void dispose() {
    _animationController.dispose(); // Dispose of the controller
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // print("rebuilding");
    return Scaffold(
      key: _scaffoldKey,
      // Set the scaffold key here

      appBar: AppBar(
        title: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            GestureDetector(
              onTap: () => _scaffoldKey.currentState?.openDrawer(),
              child: Image.asset("assets/icons/sidebar.png"),
            ),
            SizedBox(width: 30),
            customToggle(), // Replace with your actual toggle
            SizedBox(width: 10),
            GestureDetector(
              onTap: () {
                Get.to(MeetingPage());
              },
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.amber,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Image.asset("assets/icons/calender.png"),
                ),
              ),
            ),
            SizedBox(width: 0),
            GestureDetector(
              onTap: () {
                Get.to(CalDemo());
              },
              child: Image.asset("assets/icons/todo.png"),
            ),
            // Notification icon with badge showing unread notifications
            Obx(
              () {
                int unreadCount = notificationController.notifications
                    .where((notification) => !notification.isRead)
                    .length; // Count unread notifications
                return badges.Badge(
                  badgeContent: Text(
                    unreadCount.toString(),
                    style: TextStyle(color: Colors.white),
                  ),
                  showBadge: unreadCount > 0,
                  child: GestureDetector(
                    onTap: () {
                      Get.to(NotificationsPage());
                    },
                    child: Icon(
                      Icons.notification_add_outlined,
                      color: Colors.black,
                      size: 30,
                    ),
                  ),
                );
              },
            ),
          ],
        ),
        automaticallyImplyLeading: false,
        backgroundColor: Color(0xFFE1FFED),
        elevation: 0,
      ),
      drawer: CustomDrawer(),
      body: Stack(
        children: [
          // Background Container
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.centerLeft,
                end: Alignment.centerRight,
                colors: [Color(0xFFE1FFED), Color(0xFFE6E6E6)],
              ),
            ),
          ),
          Obx(() {
            // Show the respective dashboard based on switch state
            if (controller.isAdminMode.value) {
              return buildCommon();
            } else {
              return adminPanel(controlleradmin); // Your My Dashboard widget
            }
          }),

          // Main Body Scrollable Content
        ],
      ),
    );
  }

  Widget buildCommon() {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Top Row for Buttons
          SizedBox(height: 18),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              // Button Area
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  Obx(() => ElevatedButton(
                        onPressed: () {
                          controller.isTaskSelected.value = true;
                          // controller.resetToTodayTab();
                          controller.fetchTasksByTab("Today");
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: controller.isTaskSelected.value
                              ? primary3Color
                              : Colors.white,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(50),
                            side: BorderSide(color: Colors.grey),
                          ),
                          padding: EdgeInsets.symmetric(
                              horizontal: 40, vertical: 15),
                        ),
                        child: Row(
                          children: [
                            Image.asset("assets/icons/task.png",
                                color: controller.isTaskSelected.value
                                    ? Colors.white
                                    : Colors.black),
                            SizedBox(width: 15),
                            Text("Task",
                                style: TextStyle(
                                    color: controller.isTaskSelected.value
                                        ? Colors.white
                                        : Colors.black,
                                    fontSize: 20)),
                            SizedBox(width: 15),
                            Text(controller.taskCount.value.toString(),
                                style: TextStyle(
                                    color: controller.isTaskSelected.value
                                        ? Colors.white
                                        : Colors.black,
                                    fontSize: 20)),
                          ],
                        ),
                      )),
                  SizedBox(width: 10),
                  Obx(() => ElevatedButton(
                        onPressed: () {
                          controller.isTaskSelected.value = false;
                          controller.fetchAssignedLead();
                          controller.resetToTodayTab();
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: controller.isTaskSelected.value
                              ? Colors.white
                              : primary3Color,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(50),
                            side: BorderSide(color: Colors.grey),
                          ),
                          padding: EdgeInsets.symmetric(
                              horizontal: 40, vertical: 15),
                        ),
                        child: Row(
                          children: [
                            Image.asset("assets/icons/lead.png",
                                color: controller.isTaskSelected.value
                                    ? Colors.black
                                    : Colors.white),
                            SizedBox(width: 15),
                            Text("Lead",
                                style: TextStyle(
                                    color: controller.isTaskSelected.value
                                        ? Colors.black
                                        : Colors.white,
                                    fontSize: 20)),
                            SizedBox(width: 15),
                            Text(controller.leadCount.value.toString(),
                                style: TextStyle(
                                    color: controller.isTaskSelected.value
                                        ? Colors.black
                                        : Colors.white,
                                    fontSize: 20)),
                          ],
                        ),
                      )),
                ],
              ),
            ],
          ),
          SizedBox(height: 10),

          // Task or Lead Card Display
          Obx(() {
            return SizedBox(
              height: controller.isTaskSelected.value
                  ? MediaQuery.of(context).size.height * 0.5
                  : MediaQuery.of(context).size.height * 0.8,
              child: controller.isTaskSelected.value ? TaskCard() : LeadCard(),
            );
          }),

          // Additional content that will scroll
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              "Additional Content Here",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ),
          SizedBox(
            child: Obx(() => controller.isTaskSelected.value
                ? buildDoughnut()
                : buildPieChart()),
          ),
          SizedBox(
            child: Obx(
              () => controller.isTaskSelected.value
                  ? Padding(
                      padding: const EdgeInsets.all(18.0),
                      child: GridView.count(
                        crossAxisCount: 2,
                        shrinkWrap: true,
                        physics: const NeverScrollableScrollPhysics(),
                        crossAxisSpacing: 14,
                        mainAxisSpacing: 10,
                        childAspectRatio: 1,
                        children: [
                          StatCard(
                            title: "Total Leads",
                            value: "2,456",
                            icon: Icons.people_alt,
                            color: Colors.blue,
                          ),
                          StatCard(
                            title: "Lost Leads",
                            value: "145",
                            icon: Icons.remove_circle,
                            color: Colors.red,
                          ),
                          StatCard(
                            title: "Total Amount",
                            value: "₹45.2M",
                            icon: Icons.monetization_on,
                            color: Colors.green,
                          ),
                          StatCard(
                            title: "Lost Amount",
                            value: "₹5.8M",
                            icon: Icons.money_off,
                            color: Colors.orange,
                          ),
                        ],
                      ),
                    )
                  : Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: GridView.count(
                        crossAxisCount: 2,
                        shrinkWrap: true,
                        physics: const NeverScrollableScrollPhysics(),
                        crossAxisSpacing: 14,
                        mainAxisSpacing: 10,
                        childAspectRatio: 1,
                        children: [
                          StatCard(
                            title: "Total Tasks",
                            value: "2,456",
                            icon: Icons.people_alt,
                            color: Colors.blue,
                          ),
                          StatCard(
                            title: "Completed Tasks",
                            value: "1145",
                            icon: Icons.remove_circle,
                            color: Colors.red,
                          ),
                          StatCard(
                            title: "Pending Tasks",
                            value: "1200",
                            icon: Icons.monetization_on,
                            color: Colors.green,
                          ),
                          StatCard(
                            title: "Completeion Percentage",
                            value: "48.33%",
                            icon: Icons.money_off,
                            color: Colors.orange,
                          ),
                        ],
                      ),
                    ),
            ),
          ),
        ],
      ),
    );
  }

  Widget customToggle() {
    return Center(
      child: Obx(
        () => GestureDetector(
          onTap: () {
            controller.toggleMode(!controller.isAdminMode.value);
          },
          child: Container(
            width: 120,
            height: 40,
            decoration: BoxDecoration(
              color: Colors.amber, // Base color
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black26,
                  blurRadius: 4,
                  offset: Offset(0, 2),
                ),
              ],
            ),
            child: Stack(
              alignment: Alignment.center,
              children: [
                // Left side (Dashboard SVG)
                Positioned(
                  left: 10,
                  child: SizedBox(
                    width: 20,
                    height: 20,
                    child: SvgPicture.asset(
                      "assets/icons/userdb.svg",
                      colorFilter:
                          ColorFilter.mode(Colors.black87, BlendMode.srcIn),
                    ),
                  ),
                ),
                // Right side (Admin SVG)
                Positioned(
                  right: 10,
                  child: SizedBox(
                    width: 20,
                    height: 20,
                    child: SvgPicture.asset(
                      "assets/icons/admin.svg",
                      colorFilter:
                          ColorFilter.mode(Colors.black87, BlendMode.srcIn),
                    ),
                  ),
                ),
                // Animated Toggle Circle with SVG
                AnimatedPositioned(
                  duration: Duration(milliseconds: 300),
                  curve: Curves.easeInOut,
                  left:
                      controller.isAdminMode.value ? 70 : 0, // Toggle position
                  top: 0,
                  bottom: 0,
                  child: Container(
                    width: 50,
                    height: 40,
                    decoration: BoxDecoration(
                      color: Colors.black, // Active side color
                      borderRadius: BorderRadius.circular(30),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black45,
                          blurRadius: 4,
                          offset: Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Center(
                      child: SizedBox(
                        width: 20,
                        height: 20,
                        child: SvgPicture.asset(
                          controller.isAdminMode.value
                              ? "assets/icons/admin.svg"
                              : "assets/icons/userdb.svg",
                          colorFilter:
                              ColorFilter.mode(Colors.white, BlendMode.srcIn),
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget TaskCard() {
    return Column(
      children: [
        // Tab Bar for Today, Upcoming, Overdue
        Container(
          margin: EdgeInsets.symmetric(horizontal: 12, vertical: 10),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [primary3Color, buttonBgColor], // Gradient effect
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black26,
                offset: Offset(0, 6),
                blurRadius: 6,
              ),
            ],
          ),
          child: Obx(() => TabBar(
                controller: controller
                    .tabController, // Use the controller's tabController
                padding: EdgeInsets.all(5),
                isScrollable: false, // Make it not scrollable
                labelColor: Colors.white,
                labelStyle: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
                indicatorColor: Colors.white,
                indicatorWeight: 4,
                dividerHeight: 0,
                onTap: (index) {
                  controller.pageController
                      .jumpToPage(index); // Change page when a tab is tapped
                  final tabType = index == 0
                      ? 'Today'
                      : (index == 1 ? 'Upcoming' : 'Overdue');
                  controller.fetchTasksByTab(tabType);
                  controller.fetchDashboardCount();
                },
                tabs: [
                  Tab(
                    text: controller.isLoading.value
                        ? 'Today'
                        : 'Today ${controller.todayCount.value > 0 ? '(${controller.todayCount.value})' : ''}',
                  ),
                  Tab(
                    text: controller.isLoading.value
                        ? 'Upcoming'
                        : 'Upcoming ${controller.upcomingCount.value > 0 ? '(${controller.upcomingCount.value})' : ''}',
                  ),
                  Tab(
                    text: controller.isLoading.value
                        ? 'Overdue'
                        : 'Overdue ${controller.overdueCount.value > 0 ? '(${controller.overdueCount.value})' : ''}',
                  ),
                ],
              )),
        ),
        // PageView for Custom Animations
        Expanded(
          child: PageView(
            controller: controller.pageController,
            onPageChanged: (index) {
              controller.tabController.animateTo(index);
              final tabType =
                  index == 0 ? 'Today' : (index == 1 ? 'Upcoming' : 'Overdue');
              controller.fetchTasksByTab(tabType);
              controller.fetchDashboardCount();
            },
            children: [
              RefreshIndicator(
                onRefresh: () async {
                  controller.fetchTasksByTab("Today");
                  controller.fetchDashboardCount();
                },
                child: buildTaskList("Today"),
              ),
              RefreshIndicator(
                onRefresh: () async {
                  controller.fetchTasksByTab("Upcoming");
                  controller.fetchDashboardCount();
                },
                child: buildTaskList("Upcoming"),
              ),
              RefreshIndicator(
                onRefresh: () async {
                  controller.fetchTasksByTab("Overdue");
                  controller.fetchDashboardCount();
                },
                child: buildTaskList("Overdue"),
              ),
            ],
          ),
        ),
        // Optional: Progress Bar Card at the bottom
      ],
    );
  }

  Widget buildTaskList([String tabType = "Today"]) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 0),
      padding: EdgeInsets.only(top: 0, bottom: 4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 2,
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildHeader(tabType),
          Expanded(
            child: Obx(() {
              if (controller.isLoading.value) {
                // Ensure the loading spinner is centered within the available space
                return Center(
                  child: CustomLoader(),
                );
              }

              // If no tasks are available, show a message
              if (controller.tasks.isEmpty) {
                return Center(
                  child: Text('No tasks available.'),
                );
              }

              // If tasks are available, show them in a ListView
              return ListView.builder(
                itemCount: controller.tasks.length,
                itemBuilder: (context, index) {
                  final task = controller.tasks[index];
                  return CustomTaskCard(
                    taskType: task.entrytype ?? "",
                    date:
                        controller.formatDate(task.createdDateTime.toString()),
                    assigneeName: task.cname ?? "",
                    onNameTap: () {
                      Get.to(() => TaskDetailPage(), arguments: {
                        "taskId":
                            task.id, // Replace this with your dynamic taskId
                      })!
                          .then((_) {
                        controller.fetchTasksByTab(tabType);
                      });

                      // print('Name tapped: ${task.id}');
                    },
                    onCheckboxChanged: (bool? value) =>
                        controller.onCheckboxChanged(index, value, task.id!),
                    isChecked: task.isChecked,
                  );
                },
              );
            }),
          ),
        ],
      ),
    );
  }

  Widget _buildHeader(String tabType) {
    return Container(
      decoration: BoxDecoration(color: Colors.white),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              '$tabType tasks',
              style:
                  TextStyle(fontWeight: FontWeight.bold, color: Colors.black),
            ),
            PopupMenuButton<String>(
              icon: const Icon(Icons.more_vert, color: Colors.black54),
              color: Colors.white,
              onSelected: (value) async {
                // print(value);

                List<Map<String, dynamic>> body =
                    controller.selected.map((taskId) {
                  return {
                    "Taskid": taskId.toString(),
                    "ACTIVITYSTATUS":
                        value == 'Mark as Completed' ? "Completed" : "Cancel",
                    "UserID": controller.box.read("userId"),
                    // Assuming UserID is static or can be replaced by a dynamic value
                  };
                }).toList();

                // print("Constructed body: $body");

                await controller.postStatus(body);

                controller.fetchTasksByTab(tabType);
                controller.fetchDashboardCount();

                controller.selected.clear();
              },
              itemBuilder: (BuildContext context) {
                return {'Mark as Completed', 'Mark as Cancel'}
                    .map((String choice) {
                  return PopupMenuItem<String>(
                    value: choice,
                    child: Text(choice),
                  );
                }).toList();
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildViewAllButton(void onpress()) {
    return Align(
      alignment: Alignment.center,
      child: TextButton(
        onPressed: onpress,
        style: TextButton.styleFrom(
          foregroundColor: Colors.blue,
          textStyle: TextStyle(fontSize: 14),
        ),
        child: Text("View All"),
      ),
    );
  }

  Widget LeadCard() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Header Section
        Container(
          margin: EdgeInsets.all(10),
          padding: EdgeInsets.symmetric(vertical: 6, horizontal: 12),
          decoration: BoxDecoration(
            color: popupColor,
            borderRadius: BorderRadius.circular(12),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Latest Leads',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                  color: Colors.white,
                ),
              ),
              PopupMenuButton<String>(
                icon: const Icon(Icons.more_vert, color: Colors.white),
                color: Colors.white,
                onSelected: (value) {
                  _onMenuSelection(context, value);
                },
                itemBuilder: (BuildContext context) {
                  return {'Lead Date', 'Follow-Up Date'}.map((String choice) {
                    return PopupMenuItem<String>(
                      value: choice,
                      child: Text(choice),
                    );
                  }).toList();
                },
              ),
            ],
          ),
        ),

        // Lead List Section
        Expanded(
          child: Container(
            margin: EdgeInsets.only(left: 10, right: 10),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.grey.withOpacity(0.1)),
            ),
            child: Obx(() {
              if (controller.isLoading.value) {
                return Center(child: CustomLoader());
              }

              if (controller.leads.isEmpty) {
                return Center(
                  child: Text(
                    'No leads available.',
                    style: TextStyle(color: Colors.grey, fontSize: 16),
                  ),
                );
              }

              return ListView.builder(
                controller: controller.scrollController,
                itemCount: controller.leads.length,
                itemBuilder: (context, index) {
                  LeadList lead = controller.leads[index];

                  // Individual Lead Row
                  return Container(
                    margin: EdgeInsets.symmetric(vertical: 5, horizontal: 4),
                    padding: EdgeInsets.all(10),
                    decoration: BoxDecoration(
                      color: Colors.black12,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // Name (Clickable)
                        SizedBox(
                          width: Get.width * 0.2,
                          child: GestureDetector(
                            onTap: () {
                              Get.toNamed(Routes.leadDetail,
                                  arguments: lead.leadId);
                              // Navigate to lead details or perform action
                            },
                            child: Text(
                              lead.name,
                              style: TextStyle(
                                color: Colors.blue,
                                fontWeight: FontWeight.bold,
                              ),
                              overflow: TextOverflow.ellipsis,
                              maxLines: 2,
                            ),
                          ),
                        ),
                        // Lead Date
                        SizedBox(
                          width: Get.width * 0.2,
                          child: Text(
                            controller.formatDate(lead.vdate),
                            style: TextStyle(color: Colors.grey),
                            textAlign: TextAlign.center,
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                        // Lead Status
                        SizedBox(
                          width: Get.width * 0.25,
                          child: Text(
                            lead.leadStatus,
                            style: TextStyle(color: Colors.grey),
                            textAlign: TextAlign.center,
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                        // Lead Type Badge
                        SizedBox(
                          width: Get.width * 0.10,
                          child: Container(
                            padding: EdgeInsets.symmetric(
                                vertical: 4, horizontal: 8),
                            decoration: BoxDecoration(
                              color: _getBadgeColor(lead.priority),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              lead.priority,
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 12,
                              ),
                              textAlign: TextAlign.center,
                              overflow: TextOverflow.ellipsis,
                              maxLines: 1,
                            ),
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            }),
          ),
        ),
        _buildViewAllButton(() {}),

        SizedBox(height: 10),
        buildFunnel(), // Funnel Section
      ],
    );
  }

// Utility function to get badge color based on lead type
  Color _getBadgeColor(String leadType) {
    switch (leadType.toLowerCase()) {
      case 'cold':
        return Colors.blue;
      case 'warm':
        return Colors.orange;
      case 'hot':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  void _onMenuSelection(BuildContext context, String value) {
    if (value == 'Lead Date') {
      _selectLeadDate(context, value);
    }
    if (value == 'Follow-Up Date') {
      _selectFollowUpDate(context, value);
    }
  }

  Future<void> _selectLeadDate(BuildContext context, String menuType) async {
    // Open a bottom sheet for date selection
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.all(16.0),
          // height: 300, // Set height for the bottom sheet
          child: Column(
            children: [
              Text(
                'Select Date Range',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 20),
              // From Date Picker
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: CustomField(
                      withShadow: true,
                      labelText: "From Date",
                      hintText: "Select Start date",
                      inputAction: TextInputAction.done,
                      inputType: TextInputType.datetime,
                      showLabel: true,
                      bgColor: Colors.white,
                      enabled: true,
                      readOnly: true,
                      editingController: controller.fromDateController,
                      validator: (val) {
                        if (val!.isEmpty) {
                          return "This field is required";
                        }
                        return null;
                      },
                      onFieldTap: () {
                        Get.bottomSheet(
                          CustomDatePicker(
                            pastAllow: true,
                            confirmHandler: (date) async {
                              controller.fromDateController.text = date ?? "";
                              controller.fromDateController.text = date ?? "";
                            },
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              // Up To Date Picker
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: CustomField(
                      withShadow: true,
                      labelText: "To Date",
                      hintText: "Select end date",
                      inputAction: TextInputAction.done,
                      inputType: TextInputType.datetime,
                      showLabel: true,
                      bgColor: Colors.white,
                      enabled: true,
                      readOnly: true,
                      editingController: controller.toDateController,
                      validator: (val) {
                        if (val!.isEmpty) {
                          return "This field is required";
                        }
                        return null;
                      },
                      onFieldTap: () {
                        Get.bottomSheet(
                          CustomDatePicker(
                            pastAllow: true,
                            confirmHandler: (date) async {
                              controller.toDateController.text = date ?? "";
                              controller.toDateController.text = date ?? "";
                            },
                          ),
                        );
                      },
                    ),
                  )
                ],
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // print("The date is ${controller.fromDateController.text}");
                  controller.fetchAssignedLead(
                      fromDate: controller.fromDateController.text,
                      toDate: controller.toDateController.text);
                  Get.back();
                  controller.fromDateController.clear();
                  controller.toDateController.clear();
                },
                child: Text('Apply'),
              ),
            ],
          ),
        );
      },
    );
  }

  Future<void> _selectFollowUpDate(
      BuildContext context, String menuType) async {
    // Open a bottom sheet for date selection
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.all(16.0),
          // height: 300, // Set height for the bottom sheet
          child: Column(
            children: [
              Text(
                'Select Date Range',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 20),
              // From Date Picker
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: CustomField(
                      withShadow: true,
                      labelText: "From Date",
                      hintText: "Select Start date",
                      inputAction: TextInputAction.done,
                      inputType: TextInputType.datetime,
                      showLabel: true,
                      bgColor: Colors.white,
                      enabled: true,
                      readOnly: true,
                      editingController: controller.fromDateController,
                      validator: (val) {
                        if (val!.isEmpty) {
                          return "This field is required";
                        }
                        return null;
                      },
                      onFieldTap: () {
                        Get.bottomSheet(
                          CustomDatePicker(
                            pastAllow: true,
                            confirmHandler: (date) async {
                              controller.fromDateController.text = date ?? "";
                              controller.fromDateController.text = date ?? "";
                            },
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              // Up To Date Picker
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: CustomField(
                      withShadow: true,
                      labelText: "To Date",
                      hintText: "Select end date",
                      inputAction: TextInputAction.done,
                      inputType: TextInputType.datetime,
                      showLabel: true,
                      bgColor: Colors.white,
                      enabled: true,
                      readOnly: true,
                      editingController: controller.toDateController,
                      validator: (val) {
                        if (val!.isEmpty) {
                          return "This field is required";
                        }
                        return null;
                      },
                      onFieldTap: () {
                        Get.bottomSheet(
                          CustomDatePicker(
                            pastAllow: true,
                            confirmHandler: (date) async {
                              controller.toDateController.text = date ?? "";
                              controller.toDateController.text = date ?? "";
                            },
                          ),
                        );
                      },
                    ),
                  )
                ],
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // print("The date is ${controller.fromDateController.text}");

                  controller.fetchAssignedLead(
                      fromDate: controller.fromDateController.text,
                      toDate: controller.toDateController.text);
                  Get.back();
                  // controller.fromDateController.clear();
                  // controller.toDateController.clear();
                },
                child: Text('Apply'),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget buildFunnel() {
    final List<FunnelGraph> chartData = controller.funnelData;
    // print(chartData);
    return Container(
      margin: EdgeInsets.only(
        left: 20,
        right: 20,
      ),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.white,
      ),
      child: SfFunnelChart(
        title: ChartTitle(text: 'Funnel Chart'),
        legend: Legend(isVisible: true),
        tooltipBehavior: TooltipBehavior(enable: true),
        series: FunnelSeries<FunnelGraph, String>(
          dataSource: chartData,
          xValueMapper: (data, _) => data.label,
          yValueMapper: (data, _) => data.y,
        ),
      ),
    );
  }

  Widget buildDoughnut() {
    final List<FunnelGraph> chartData = controller.funnelData;
    // print(chartData);

    return Container(
      margin: EdgeInsets.symmetric(horizontal: 20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.white,
      ),
      child: SfCircularChart(
        borderColor: primary3Color,
        borderWidth: 2,
        // backgroundImage: AssetImage('assets/images/splash.gif',),
        palette: <Color>[
          Colors.red,
          Colors.green,
          primary3Color,
          Colors.blue,
          popupColor,
          Colors.yellow
        ],

        title: ChartTitle(text: 'Doughnut Chart'),
        legend: Legend(
          isVisible: true,
          overflowMode: LegendItemOverflowMode
              .wrap, // Ensures legends adjust for long text
        ),
        tooltipBehavior: TooltipBehavior(enable: true),
        series: <DoughnutSeries<FunnelGraph, String>>[
          DoughnutSeries<FunnelGraph, String>(
            dataSource: chartData,
            xValueMapper: (data, _) => data.label,
            // Map labels for the doughnut slices
            yValueMapper: (data, _) => data.y,
            name: 'Gold',
            // Map values for the doughnut slices
            dataLabelSettings: DataLabelSettings(
              isVisible: true, // Show labels on the chart
              labelPosition:
                  ChartDataLabelPosition.inside, // Place labels inside slices
            ),
            innerRadius:
                '60%', // Customize the inner radius to give it a "doughnut" look
          ),
        ],
      ),
    );
  }

  Widget buildPieChart() {
    final List<DealData> chartData = controller.pieData;
    // print(chartData);

    return Container(
      margin: EdgeInsets.symmetric(horizontal: 20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.white,
      ),
      child: SfCircularChart(
        title: ChartTitle(text: 'Pie Chart'),
        legend: Legend(
          isVisible: true,
          overflowMode: LegendItemOverflowMode
              .wrap, // Ensures legends adjust for long text
        ),
        tooltipBehavior: TooltipBehavior(enable: true),
        series: <PieSeries<DealData, String>>[
          PieSeries<DealData, String>(
            dataSource: chartData,
            xValueMapper: (data, _) => data.monthName,
            // Map labels for the pie slices
            yValueMapper: (data, _) => data.dealSizeAmount,
            // Map values for the pie slices
            dataLabelSettings: DataLabelSettings(
              isVisible: true, // Show labels on the chart
              labelPosition:
                  ChartDataLabelPosition.outside, // Place labels outside slices
            ),
          ),
        ],
      ),
    );
  }
}

Widget adminPanel(AdminPanelController controller) {
  return Padding(
    padding: const EdgeInsets.all(16.0),
    child: SingleChildScrollView(
      child: Column(
        children: [
          // Stats Grid
          GridView.count(
            crossAxisCount: 2,
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            crossAxisSpacing: 14,
            mainAxisSpacing: 10,
            childAspectRatio: 1,
            children: [
              StatCard(
                title: "Total Leads",
                value: "2,456",
                icon: Icons.people_alt,
                color: Colors.blue,
              ),
              StatCard(
                title: "Lost Leads",
                value: "145",
                icon: Icons.remove_circle,
                color: Colors.red,
              ),
              StatCard(
                title: "Total Amount",
                value: "₹45.2M",
                icon: Icons.monetization_on,
                color: Colors.green,
              ),
              StatCard(
                title: "Lost Amount",
                value: "₹5.8M",
                icon: Icons.money_off,
                color: Colors.orange,
              ),
            ],
          ),
          const SizedBox(height: 24),

          // Lead Potential Chart
          SizedBox(
            height: 400,
            child: DashboardCard(
              title: "Leads Potential",
              child: SfCircularChart(
                legend: Legend(
                  isVisible: true,
                  position: LegendPosition.bottom,
                ),
                tooltipBehavior: TooltipBehavior(enable: true),
                series: [
                  DoughnutSeries<Map<String, dynamic>, String>(
                    dataSource: controller.leadsData,
                    xValueMapper: (data, _) =>
                        "${data['label']} (${data['value']})",
                    yValueMapper: (data, _) => data['value'],
                    pointColorMapper: (data, _) => data['color'],
                    innerRadius: '70%',
                  ),
                ],
                annotations: [
                  CircularChartAnnotation(
                    widget: TotalDisplay(
                      total: controller.leadsData
                          .map((e) => e['value'] as int? ?? 0)
                          .reduce((a, b) => a + b),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 24),

          // Current Month Conversion Rate
          SizedBox(
            height: 400,
            child: DashboardCard(
              title: "Current Month Conversion Rate",
              child: SfCartesianChart(
                tooltipBehavior: TooltipBehavior(enable: true),
                primaryXAxis: CategoryAxis(),
                primaryYAxis: NumericAxis(
                  labelFormat: '{value}%',
                  minimum: 0,
                  maximum: 100,
                ),
                series: [
                  ColumnSeries<Map<String, dynamic>, String>(
                    dataSource: controller.conversionData,
                    xValueMapper: (data, _) => data['label'],
                    yValueMapper: (data, _) => data['value'],
                    pointColorMapper: (data, _) => data['color'],
                    borderRadius: BorderRadius.circular(8),
                    dataLabelSettings: const DataLabelSettings(isVisible: true),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 24),

          // Top 5 Leads by Salesman
          SizedBox(
            height: 300,
            child: DashboardCard(
              title: "Top 5 Leads by Salesman",
              child: ListView.builder(
                itemCount: controller.topSalesmanLeads.length,
                itemBuilder: (context, index) {
                  final item = controller.topSalesmanLeads[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(vertical: 8),
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.blue.withOpacity(0.05),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      children: [
                        CircleAvatar(
                          backgroundColor: Colors.blue.withOpacity(0.1),
                          child: Text('${index + 1}'),
                        ),
                        const SizedBox(width: 12),
                        Text(
                          item['name'],
                          style: const TextStyle(fontWeight: FontWeight.bold),
                        ),
                        const Spacer(),
                        Text(
                          '₹${item['amount']}',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
          const SizedBox(height: 24),

          // Top 5 Salesmen
          SizedBox(
            height: 300,
            child: DashboardCard(
              title: "Top 5 Salesmen",
              child: ListView.builder(
                itemCount: controller.topSalesmen.length,
                itemBuilder: (context, index) {
                  final item = controller.topSalesmen[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(vertical: 8),
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.05),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      children: [
                        CircleAvatar(
                          backgroundImage: NetworkImage(item['avatar']),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                item['name'],
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                              Text(
                                '${item['deals']} deals',
                                style: TextStyle(
                                  color: Colors.grey[600],
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                        ),
                        Text(
                          '₹${item['amount']}',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.green,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
          const SizedBox(height: 24),

          // State-wise Sales
          SizedBox(
            height: 400,
            child: DashboardCard(
              title: "State-wise Sales",
              child: SfCartesianChart(
                tooltipBehavior: TooltipBehavior(enable: true),
                primaryXAxis: CategoryAxis(),
                primaryYAxis: NumericAxis(
                  title: AxisTitle(text: 'Sales (in Millions)'),
                ),
                series: [
                  ColumnSeries<Map<String, dynamic>, String>(
                    dataSource: controller.stateSales,
                    xValueMapper: (data, _) => data['state'],
                    yValueMapper: (data, _) => data['sales'],
                    pointColorMapper: (data, _) => data['color'],
                    dataLabelSettings: const DataLabelSettings(isVisible: true),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 24),

          // Top 5 Products
          SizedBox(
            height: 400,
            child: DashboardCard(
              title: "Top 5 Hot Selling Products",
              child: ListView.builder(
                itemCount: controller.topProducts.length,
                itemBuilder: (context, index) {
                  final product = controller.topProducts[index];
                  return Container(
                    margin: const EdgeInsets.symmetric(vertical: 8),
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.purple.withOpacity(0.05),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Row(
                      children: [
                        Container(
                          width: 45,
                          height: 45,
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                                color: Colors.purple.withOpacity(0.2)),
                          ),
                          child: Center(
                            child: Text(
                              '${index + 1}',
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Colors.purple,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                product['name'],
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold),
                              ),
                              Text(
                                '${product['units']} units sold',
                                style: TextStyle(
                                  color: Colors.grey[600],
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                        ),
                        Text(
                          '₹${product['revenue']}',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.purple,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    ),
  );
}

class StatCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  final Color color;

  const StatCard({
    Key? key,
    required this.title,
    required this.value,
    required this.icon,
    required this.color,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.1),
            spreadRadius: 3,
            blurRadius: 5,
          ),
        ],
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: color, size: 32),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            title,
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 14,
            ),
          ),
        ],
      ),
    );
  }
}

// Reusable card widget for dashboard elements
class DashboardCard extends StatelessWidget {
  final String title;
  final Widget child;

  const DashboardCard({
    Key? key,
    required this.title,
    required this.child,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Get.to(EmployeeDetail());
      },
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.2),
              spreadRadius: 3,
              blurRadius: 5,
            ),
          ],
        ),
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Expanded(child: child),
          ],
        ),
      ),
    );
  }
}

// Reusable total display widget
class TotalDisplay extends StatelessWidget {
  final int total;

  const TotalDisplay({
    Key? key,
    required this.total,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Text(
      '$total\nTotal',
      textAlign: TextAlign.center,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
      ),
    );
  }
}

class TaskCards extends StatelessWidget {
  final HomeController controller;

  TaskCards({Key? key, required this.controller}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        _buildTabBar(),
        Expanded(child: _buildPageView()),
      ],
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Theme.of(Get.context!).primaryColor, Colors.blue.shade700],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black26,
            offset: const Offset(0, 3),
            blurRadius: 4,
          ),
        ],
      ),
      child: TabBar(
        controller: controller.tabController,
        padding: const EdgeInsets.all(5),
        labelColor: Colors.white,
        labelStyle: const TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 15,
        ),
        indicatorColor: Colors.white,
        indicatorWeight: 3,
        onTap: _handleTabTap,
        tabs: _buildTabs(),
      ),
    );
  }

  List<Widget> _buildTabs() {
    return [
      _buildTab('Today', controller.todayCount),
      _buildTab('Upcoming', controller.upcomingCount),
      _buildTab('Overdue', controller.overdueCount),
    ];
  }

  Widget _buildTab(String title, RxInt count) {
    return Tab(
      child: Obx(() => Text(
            controller.isLoading.value
                ? title
                : '$title ${count.value > 0 ? '(${count.value})' : ''}',
            style: const TextStyle(fontSize: 14),
          )),
    );
  }

  Widget _buildPageView() {
    return PageView(
      controller: controller.pageController,
      onPageChanged: _handlePageChange,
      children: [
        _buildTaskListPage("Today"),
        _buildTaskListPage("Upcoming"),
        _buildTaskListPage("Overdue"),
      ],
    );
  }

  Widget _buildTaskListPage(String tabType) {
    return RefreshIndicator(
      onRefresh: () => _refreshTasks(tabType),
      child: _buildTaskListContainer(tabType),
    );
  }

  Widget _buildTaskListContainer(String tabType) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildListHeader(tabType),
          Expanded(
            child: _buildTaskListContent(tabType),
          ),
          _buildViewAllSection(),
        ],
      ),
    );
  }

  Widget _buildListHeader(String tabType) {
    return Padding(
      padding: const EdgeInsets.all(12),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            '$tabType Tasks',
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
          _buildHeaderActions(tabType),
        ],
      ),
    );
  }

  Widget _buildHeaderActions(String tabType) {
    return Obx(() => PopupMenuButton<String>(
          enabled: controller.selected.isNotEmpty,
          icon: Icon(
            Icons.more_vert,
            color: controller.selected.isEmpty ? Colors.grey : Colors.black87,
          ),
          onSelected: (value) => _handleMenuAction(value, tabType),
          itemBuilder: (context) => [
            PopupMenuItem(
              value: 'complete',
              child: const Text('Mark as Completed'),
            ),
            PopupMenuItem(
              value: 'cancel',
              child: const Text('Mark as Cancelled'),
            ),
          ],
        ));
  }

  Widget _buildTaskListContent(String tabType) {
    return Obx(() {
      if (controller.isLoading.value) {
        return const Center(child: CircularProgressIndicator());
      }

      if (controller.tasks.isEmpty) {
        return _buildEmptyState(tabType);
      }

      return ListView.builder(
        itemCount: controller.tasks.length.clamp(0, 5),
        itemBuilder: (context, index) => _buildTaskItem(
          controller.tasks[index],
          tabType,
        ),
      );
    });
  }

  Widget _buildEmptyState(String tabType) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.task_alt,
            size: 48,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'No $tabType tasks available',
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 16,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTaskItem(dynamic task, String tabType) {
    return CustomTaskCard(
      key: ValueKey(task.id),
      taskType: task.entrytype ?? 'Unknown',
      date: controller.formatDate(task.createdDateTime.toString()),
      assigneeName: task.cname ?? 'Unassigned',
      onNameTap: () => _navigateToTaskDetail(task, tabType),
      onCheckboxChanged: (value) =>
          controller.onCheckboxChanged(task.id!, value ?? false, task.id),
      isChecked: task.isChecked,
    );
  }

  Widget _buildViewAllSection() {
    return Obx(() => controller.tasks.isNotEmpty
        ? TextButton(
            onPressed: () => Get.to(() => AllTaskPage()),
            child: const Text(
              'View All',
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          )
        : const SizedBox.shrink());
  }

  // Helper Methods
  void _handleTabTap(int index) {
    controller.pageController.jumpToPage(index);
    _refreshCurrentTab(index);
  }

  void _handlePageChange(int index) {
    controller.tabController.animateTo(index);
    _refreshCurrentTab(index);
  }

  void _refreshCurrentTab(int index) {
    final tabType = _getTabType(index);
    controller.fetchTasksByTab(tabType);
    controller.fetchDashboardCount();
  }

  Future<void> _refreshTasks(String tabType) async {
    await controller.fetchTasksByTab(tabType);
    await controller.fetchDashboardCount();
  }

  String _getTabType(int index) {
    switch (index) {
      case 0:
        return 'Today';
      case 1:
        return 'Upcoming';
      case 2:
        return 'Overdue';
      default:
        return 'Today';
    }
  }

  Future<void> _handleMenuAction(String value, String tabType) async {
    final status = value == 'complete' ? 'Completed' : 'Cancel';

    try {
      controller.isLoading.value = true;
      final body = controller.selected
          .map((taskId) => {
                "Taskid": taskId.toString(),
                "ACTIVITYSTATUS": status,
                "UserID": controller.box.read("userId"),
              })
          .toList();

      controller.postStatus(body);
      await _refreshTasks(tabType);
      controller.selected.clear();
    } catch (e) {
      Get.snackbar(
        'Error',
        'Failed to update task status',
        snackPosition: SnackPosition.BOTTOM,
      );
    } finally {
      controller.isLoading.value = false;
    }
  }

  void _navigateToTaskDetail(dynamic task, String tabType) {
    Get.to(
      () => TaskDetailPage(),
      arguments: {"taskId": task.id},
    )?.then((_) => controller.fetchTasksByTab(tabType));
  }
}
